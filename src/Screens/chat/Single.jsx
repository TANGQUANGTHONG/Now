import React, { useState, useEffect, useRef, useCallback } from 'react';
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  FlatList,
  StyleSheet,
  Alert,
  Image,
  TouchableWithoutFeedback,
  Keyboard,
  LogBox,
  Modal,
  Platform,
  PermissionsAndroid,
  NativeModules,
  ActivityIndicator,
} from 'react-native';
import {
  useRoute,
  useNavigation,
  useFocusEffect,
} from '@react-navigation/native';
import { getFirestore } from '@react-native-firebase/firestore';
import {
  encryptMessage,
  decryptMessage,
  generateSecretKey,
  encodeChatId,
} from '../../cryption/Encryption';
import Icon from 'react-native-vector-icons/MaterialCommunityIcons';
import { oStackHome } from '../../navigations/HomeNavigation';
import database, { set, onValue, ref } from '@react-native-firebase/database';
import ActionSheet from 'react-native-actionsheet';
import {
  getAllChatsAsyncStorage,
  getAllUsersFromUserSend,
  getChatsByIdUserAsynStorage,
} from '../../storage/Storage';
import AsyncStorage from '@react-native-async-storage/async-storage';
import auth from '@react-native-firebase/auth';
import { Animated } from 'react-native';
import { launchImageLibrary } from 'react-native-image-picker';
import Clipboard from '@react-native-clipboard/clipboard';
import RNFS from 'react-native-fs';

globalThis.RNFB_SILENCE_MODULAR_DEPRECATION_WARNINGS = true;
const Single = () => {
  const route = useRoute();
  const {
    userId,
    myId,
    username,
    img,
    messages: cachedMessages,
  } = route.params || {}; //l·∫•y c√°c tham s·ªë truy·ªÅn v√†o t·ª´ route , bao g·ªìm userID, myID , username, h√¨nh ·∫£nh v√† tin nh·∫Øn ƒë√£ cache

  const [messages, setMessages] = useState(cachedMessages || []); //State ƒë·ªÉ qu·∫£n l√≠ tin nh·∫Øn, n·∫øu c√≥ cache th√¨ l·∫•y t·ª´
  const [text, setText] = useState(''); // State ƒë·ªÉ qu·∫£n l√Ω n·ªôi dung tin nh·∫Øn hi·ªán t·∫°i
  const navigation = useNavigation();
  const chatId = encodeChatId(userId, myId); // T·∫°o m√£ ph√≤ng chat d·ª±a tr√™n userId v√† myId
  const secretKey = generateSecretKey(userId, myId); // T·∫°o secretKey d√πng cho vi·ªác m√£ h√≥a v√† gi·∫£i m√£ tin nh·∫Øn
  const [loadingMessages, setLoadingMessages] = useState({});

  const [isSelfDestruct, setIsSelfDestruct] = useState(false); // Theo d√µi tr·∫°ng th√°i tin nh·∫Øn t·ª± h·ªßy
  const [selfDestructTime, setSelfDestructTime] = useState(null); // Th·ªùi gian tin nh·∫Øn t·ª± h·ªßy sau khi ƒë∆∞·ª£c g·ª≠i
  const [shouldAutoScroll, setShouldAutoScroll] = useState(true); // Theo d√µi tr·∫°ng th√°i cu·ªôn tin nh·∫Øn t·ª± ƒë·ªông khi c√≥ tin nh·∫Øn m·ªõi
  const [isTyping, setIsTyping] = useState(false); // Tr·∫°ng th√°i ng∆∞·ªùi d√πng ƒëang nh·∫≠p tin nh·∫Øn
  const [countChat, setcountChat] = useState(); // S·ªë l∆∞·ª£t tin nh·∫Øn ng∆∞·ªùi d√πng c√≤n c√≥ th·ªÉ g·ª≠i
  // const [resetCountdown, setResetCountdown] = useState(null);
  const [timers, setTimers] = useState({});
  setSelectedImage;
  const [user, setUser] = useState([]);
  const listRef = useRef(null); // Tham chi·∫øu ƒë·∫øn danh s√°ch tin nh·∫Øn ƒë·ªÉ th·ª±c hi·ªán c√°c h√†nh ƒë·ªông nh∆∞ cu·ªôn t·ª± ƒë·ªông
  const [isImageModalVisible, setIsImageModalVisible] = useState(false);
  const [selectedImage, setSelectedImage] = useState(null);

  const [isModalVisible, setIsModalVisible] = useState(false);
  // const fadeAnim = useRef(new Animated.Value(0)).current;
  const [lastActive, setLastActive] = useState(null);

  const [isPinModalVisible, setIsPinModalVisible] = useState(false);
  const [selectedMessage, setSelectedMessage] = useState(null);
  const [isSending, setIsSending] = useState(false);

  const [modal, setModal] = useState(false);
  const [selectedMess, setSelectedMess] = useState(null);
  const [unlockedMessages, setUnlockedMessages] = useState({});
  const [timeLefts, setTimeLefts] = useState({});
  const [loadingImageUrl, setLoadingImageUrl] = useState(null);

  const { RNMediaScanner } = NativeModules;



  const CLOUDINARY_URL = 'https://api.cloudinary.com/v1_1/dzlomqxnn/upload'; // URL c·ªßa Cloudinary ƒë·ªÉ upload ·∫£nh
  const CLOUDINARY_PRESET = 'ml_default'; // Preset c·ªßa Cloudinary cho vi·ªác upload ·∫£nh

  const timeOptions = [
    { label: '1 ph√∫t', value: 60 },
    { label: '2 ph√∫t', value: 120 },
    { label: '3 ph√∫t', value: 180 },
    { label: '4 ph√∫t', value: 240 },
    { label: '5 ph√∫t', value: 300 },
    { label: 'T·∫Øt t·ª± h·ªßy', value: null },
  ];

  // useEffect(() => {
  //   if (listRef.current && shouldAutoScroll && messages.length > 0) {
  //     listRef.current.scrollToOffset({ offset: 0, animated: true });
  //   }
  // }, [messages, shouldAutoScroll]);

  //x√≥a tin nh·∫Øn ·ªü local
  const deleteMessageLocally = async messageId => {
    try {
      // L·∫•y danh s√°ch tin nh·∫Øn t·ª´ AsyncStorage
      const storedMessages = await AsyncStorage.getItem(`messages_${chatId}`);
      let oldMessages = storedMessages ? JSON.parse(storedMessages) : [];

      // üî• ƒê√°nh d·∫•u tin nh·∫Øn l√† ƒë√£ b·ªã x√≥a thay v√¨ lo·∫°i b·ªè ho√†n to√†n
      const updatedMessages = oldMessages.map(msg =>
        msg.id === messageId ? { ...msg, deleted: true } : msg,
      );

      // üî• L∆∞u l·∫°i danh s√°ch tin nh·∫Øn ƒë√£ c·∫≠p nh·∫≠t v√†o AsyncStorage
      await AsyncStorage.setItem(
        `messages_${chatId}`,
        JSON.stringify(updatedMessages),
      );

      console.log(`üóë Tin nh·∫Øn ${messageId} ƒë√£ b·ªã ƒë√°nh d·∫•u l√† deleted.`);
      setMessages(updatedMessages); // üîÑ C·∫≠p nh·∫≠t UI ngay l·∫≠p t·ª©c
    } catch (error) {
      console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i deleted:', error);
    }
  };

  const deleteMessageForUser = async messageId => {
    try {
      const messageRef = database().ref(
        `/chats/${chatId}/messages/${messageId}`,
      );
      const snapshot = await messageRef.once('value');
      if (snapshot.exists()) {
        const messageData = snapshot.val();
        const newDeletedBy = { ...(messageData.deletedBy || {}) };
        newDeletedBy[myId] = true;
        await messageRef.update({ deletedBy: newDeletedBy });
        console.log(
          `üóë Tin nh·∫Øn ${messageId} ƒë√£ ƒë∆∞·ª£c ƒë√°nh d·∫•u x√≥a b·ªüi ${myId} tr√™n Firebase.`,
        );
      }
    } catch (error) {
      console.error(
        '‚ùå L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i deletedBy tr√™n Firebase:',
        error,
      );
    }
  };

  const recallMessageForBoth = async messageId => {
    try {
      const messageRef = database().ref(
        `/chats/${chatId}/messages/${messageId}`,
      );
      const recallRef = database().ref(
        `/chats/${chatId}/recalledMessages/${messageId}`,
      );

      // üîç Ki·ªÉm tra tin nh·∫Øn c√≥ t·ªìn t·∫°i kh√¥ng
      const snapshot = await messageRef.once('value');
      if (snapshot.exists()) {
        await messageRef.remove(); // üî• X√≥a tin nh·∫Øn kh·ªèi Firebase
      }

      // üî• L∆∞u th√¥ng tin thu h·ªìi v√†o Firebase
      await recallRef.set({
        recalled: true,
        senderId: myId,
        confirmedBy: { [myId]: true }, // ƒê√°nh d·∫•u ng∆∞·ªùi g·ª≠i ƒë√£ thu h·ªìi
        seenBy: {}, // üëÄ ƒê·ªÉ theo d√µi ai ƒë√£ th·∫•y tin nh·∫Øn thu h·ªìi
        timestamp: Date.now(),
      });

      // ‚úÖ X√≥a tin nh·∫Øn kh·ªèi AsyncStorage
      const storedMessages = await AsyncStorage.getItem(`messages_${chatId}`);
      let messages = storedMessages ? JSON.parse(storedMessages) : [];
      messages = messages.filter(msg => msg.id !== messageId);
      await AsyncStorage.setItem(
        `messages_${chatId}`,
        JSON.stringify(messages),
      );

      setMessages(messages); // üîÑ C·∫≠p nh·∫≠t UI ngay l·∫≠p t·ª©c
    } catch (error) {
      console.error('‚ùå L·ªói khi thu h·ªìi tin nh·∫Øn:', error);
    }
  };

  //L·∫Øng nghe Firebase ƒë·ªÉ c·∫≠p nh·∫≠t UI khi tin nh·∫Øn b·ªã thu h·ªìi
  useEffect(() => {
    const recallRef = database().ref(`/chats/${chatId}/recalledMessages`);

    const onMessageRecalled = async snapshot => {
      if (!snapshot.exists()) return;

      try {
        const recalledMessages = snapshot.val();
        const storedMessages = await AsyncStorage.getItem(`messages_${chatId}`);
        let localMessages = storedMessages ? JSON.parse(storedMessages) : [];

        // üî• X√≥a tin nh·∫Øn thu h·ªìi kh·ªèi giao di·ªán Local
        let updatedMessages = localMessages.filter(
          msg => !recalledMessages[msg.id],
        );
        await AsyncStorage.setItem(
          `messages_${chatId}`,
          JSON.stringify(updatedMessages),
        );
        setMessages(updatedMessages); // üîÑ C·∫≠p nh·∫≠t UI ngay l·∫≠p t·ª©c

        // ‚úÖ C·∫≠p nh·∫≠t `seenBy` b·∫±ng transaction
        for (const messageId of Object.keys(recalledMessages)) {
          const recallMsgRef = database().ref(
            `/chats/${chatId}/recalledMessages/${messageId}`,
          );

          await recallMsgRef.child(`seenBy`).transaction(currentData => {
            return { ...currentData, [myId]: true }; // ‚úÖ Ghi nh·∫≠n thi·∫øt b·ªã n√†y ƒë√£ th·∫•y tin nh·∫Øn thu h·ªìi
          });

          // üî• Ki·ªÉm tra n·∫øu c·∫£ hai ƒë√£ x√°c nh·∫≠n thu h·ªìi V√Ä ƒë√£ seen, x√≥a Firebase
          recallMsgRef.on('value', async msgSnapshot => {
            if (msgSnapshot.exists()) {
              const recallData = msgSnapshot.val();
              const seenUsers = recallData.seenBy || {};

              if (Object.keys(seenUsers).length >= 2) {
                setTimeout(async () => {
                  await recallMsgRef.remove();
                }, 5000);
              }
            }
          });
        }
      } catch (error) {
        console.error('‚ùå L·ªói khi x·ª≠ l√Ω tin nh·∫Øn thu h·ªìi:', error);
      }
    };

    recallRef.on('value', onMessageRecalled);

    return () => recallRef.off('value', onMessageRecalled);
  }, [chatId]);

  const handleLongPress = message => {
    // Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng hi·ªán t·∫°i c√≥ ph·∫£i l√† ng∆∞·ªùi g·ª≠i tin nh·∫Øn hay kh√¥ng
    // if (message.senderId !== myId) {
    //   return;
    // }

    if (message.isPinned) {
      // N·∫øu tin nh·∫Øn ƒë√£ ghim, m·ªü modal b·ªè ghim
      handleUnpinRequest(message);
    } else {
      // N·∫øu tin nh·∫Øn ch∆∞a ghim, m·ªü modal ghim
      setSelectedMessage(message);
      // setIsPinModalVisible(true);
      setSelectedMess(message); // L∆∞u tin nh·∫Øn ƒëang ch·ªçn
      setModal(true); // Hi·ªÉn th·ªã Modal
    }
  };

  const pinMessage = async (messageId, text, timestamp) => {
    try {
      const pinnedRef = database().ref(`/chats/${chatId}/pinnedMessages`);
      const snapshot = await pinnedRef.once('value');
      let pinnedMessages = snapshot.val() || [];

      if (!pinnedMessages.some(msg => msg.messageId === messageId)) {
        pinnedMessages.push({ messageId, text, timestamp });
        await pinnedRef.set(pinnedMessages);
      }
    } catch (error) {
      console.error('‚ùå L·ªói khi ghim tin nh·∫Øn:', error);
    }
  };

  const unpinMessage = async messageId => {
    try {
      const pinnedRef = database().ref(`/chats/${chatId}/pinnedMessages`);

      // L·∫•y danh s√°ch tin nh·∫Øn ƒë√£ ghim t·ª´ Firebase
      const snapshot = await pinnedRef.once('value');
      let pinnedMessages = snapshot.val() || [];

      // X√≥a tin nh·∫Øn c·ª• th·ªÉ kh·ªèi danh s√°ch ghim
      pinnedMessages = pinnedMessages.filter(
        msg => msg.messageId !== messageId,
      );
      await pinnedRef.set(pinnedMessages.length > 0 ? pinnedMessages : null);

      // L·∫•y tin nh·∫Øn t·ª´ AsyncStorage
      const storedMessages = await AsyncStorage.getItem(`messages_${chatId}`);
      let messages = storedMessages ? JSON.parse(storedMessages) : [];

      // C·∫≠p nh·∫≠t tr·∫°ng th√°i b·ªè ghim trong AsyncStorage
      messages = messages.map(msg =>
        msg.id === messageId ? { ...msg, isPinned: false } : msg,
      );
      await AsyncStorage.setItem(
        `messages_${chatId}`,
        JSON.stringify(messages),
      );

      console.log(`üìå Tin nh·∫Øn ${messageId} ƒë√£ ƒë∆∞·ª£c b·ªè ghim.`);
      setMessages(messages); // C·∫≠p nh·∫≠t UI ngay
    } catch (error) {
      console.error('‚ùå L·ªói khi b·ªè ghim tin nh·∫Øn:', error);
    }
  };

  // const handlePinMessage = message => {
  //   if (message.isPinned) {
  //     // N·∫øu tin nh·∫Øn ƒë√£ ghim, m·ªü modal b·ªè ghim
  //     handleUnpinRequest(message);
  //   } else {
  //     // N·∫øu tin nh·∫Øn ch∆∞a ghim, m·ªü modal ghim
  //     setSelectedMessage(message);
  //     setIsPinModalVisible(true);
  //   }
  // };

  const handleUnpinRequest = message => {
    setSelectedMessage(message); // L∆∞u tin nh·∫Øn c·∫ßn b·ªè ghim
    setIsPinModalVisible(true); // M·ªü modals
  };

  const renderPinnedMessages = () => {
    const pinnedMessages = messages.filter(msg => msg.isPinned);

    return (
      <FlatList
        data={pinnedMessages}
        keyExtractor={item => item.id}
        renderItem={({ item }) => (
          <TouchableOpacity
            onPress={() => {
              setSelectedMessage(item); // L∆∞u tin nh·∫Øn ƒëang ch·ªçn
              setIsPinModalVisible(true); // M·ªü modal x√°c nh·∫≠n g·ª° ghim
            }}
            style={styles.pinnedMessageContainer}>
            <Text style={styles.pinnedMessageText}>{item.text}</Text>
            <Text style={styles.pinnedMessageTime}>
              {new Date(item.timestamp).toLocaleTimeString()}
            </Text>
          </TouchableOpacity>
        )}
      />
    );
  };

  useEffect(() => {
    const pinnedRef = database().ref(`/chats/${chatId}/pinnedMessages`);

    const onPinnedChange = async snapshot => {
      if (!snapshot.exists()) {
        // N·∫øu kh√¥ng c√≥ tin nh·∫Øn ghim, x√≥a tr·∫°ng th√°i ghim trong AsyncStorage
        const storedMessages = await AsyncStorage.getItem(`messages_${chatId}`);
        let messages = storedMessages ? JSON.parse(storedMessages) : [];
        messages = messages.map(msg => ({ ...msg, isPinned: false }));

        await AsyncStorage.setItem(
          `messages_${chatId}`,
          JSON.stringify(messages),
        );
        setMessages(messages);
        return;
      }

      // ‚úÖ L·∫•y danh s√°ch t·∫•t c·∫£ tin nh·∫Øn ƒë√£ ghim
      const pinnedMessages = snapshot.val() || [];

      // üî• C·∫≠p nh·∫≠t tr·∫°ng th√°i ghim cho ƒë√∫ng t·∫•t c·∫£ tin nh·∫Øn
      const storedMessages = await AsyncStorage.getItem(`messages_${chatId}`);
      let messages = storedMessages ? JSON.parse(storedMessages) : [];

      messages = messages.map(msg => ({
        ...msg,
        isPinned: pinnedMessages.some(pinned => pinned.messageId === msg.id),
      }));

      await AsyncStorage.setItem(
        `messages_${chatId}`,
        JSON.stringify(messages),
      );
      setMessages(messages);
    };

    pinnedRef.on('value', onPinnedChange);
    return () => pinnedRef.off('value', onPinnedChange);
  }, [chatId]);

  useEffect(() => {
    const loadMessagesFromStorage = async () => {
      try {
        const storedMessages = await AsyncStorage.getItem(`messages_${chatId}`);
        let messages = storedMessages ? JSON.parse(storedMessages) : [];

        // ‚úÖ L·ªçc b·ªè tin nh·∫Øn ƒë√£ b·ªã x√≥a
        messages = messages.filter(msg => !(msg.deletedBy && msg.deletedBy[myId]));

        // ‚úÖ ƒê·∫∑t l·∫°i `isLocked = true` cho tin nh·∫Øn ch∆∞a b·ªã x√≥a
        messages = messages.map(msg => ({
          ...msg,
          isLocked: msg.deletedBy && msg.deletedBy[myId] ? false : true,
        }));

        setMessages(messages);
        console.log('üì© Tin nh·∫Øn sau khi m·ªü l·∫°i:', messages);
      } catch (error) {
        console.error('‚ùå L·ªói khi t·∫£i tin nh·∫Øn t·ª´ AsyncStorage:', error);
      }
    };

    loadMessagesFromStorage();
  }, [chatId]);




  // LogBox.ignoreLogs(['Animated: `useNativeDriver` was not specified']);
  LogBox.ignoreAllLogs();
  console.warn = () => { };
  // console.log("secretKey",secretKey)
  // console.log("userID",userId)
  // üîπ L·∫•y tin nh·∫Øn realtime
  // animation tin nh·∫Øn
  // useEffect(() => {
  //   Animated.timing(fadeAnim, {
  //     toValue: 1,
  //     duration: 500,
  //     useNativeDriver: true,
  //   }).start();
  // }, []);

  //hi·ªÉn th·ªã tr·∫°ng th√°i ho·∫°t ƒë·ªông c·ªßa ng∆∞·ªùi d√πng
  useEffect(() => {
    const updateLastActive = async () => {
      const userRef = database().ref(`/users/${myId}/lastActive`);
      await userRef.set(database.ServerValue.TIMESTAMP);
    };

    updateLastActive();

    const interval = setInterval(updateLastActive, 60000);
    return () => {
      clearInterval(interval);
    };
  }, [myId]);

  //l·∫Øng nghe thay ƒë·ªïi tr·∫°ng th√°i ho·∫°t ƒë·ªông c·ªßa ng∆∞·ªùi d√πng t·ª´ Firebase
  useEffect(() => {
    // T·∫°o tham chi·∫øu ƒë·∫øn gi√° tr·ªã "lastActive" c·ªßa ng∆∞·ªùi d√πng trong firebase
    const userRef = database().ref(`/users/${userId}/lastActive`);

    // ƒê·ªãnh nghƒ©a h√†m s·∫Ω ƒë∆∞·ª£c g·ªçi khi gi√° tr·ªã "lastActive" thay ƒë·ªïi
    const onUserActiveChange = snapshot => {
      // Ki·ªÉm tra xem gi√° tr·ªã "lastActive" c√≥ t·ªìn t·∫°i trong snapshot kh√¥ng
      if (snapshot.exists()) {
        // L·∫•y gi√° tr·ªã lastActive t·ª´ Firebase
        const lastActive = snapshot.val();

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i lastActive trong local (·ª©ng d·ª•ng) v·ªõi gi√° tr·ªã t·ª´ Firebase
        setLastActive(lastActive);
      }
    };

    // Thi·∫øt l·∫≠p l·∫Øng nghe s·ª± thay ƒë·ªïi c·ªßa lastActive trong Firebase
    userRef.on('value', onUserActiveChange);

    // X√≥a listener khi component b·ªã h·ªßy ho·∫∑c khi userId thay ƒë·ªïi
    return () => userRef.off('value', onUserActiveChange);
  }, [userId]); // M·∫£ng ph·ª• thu·ªôc ƒë·∫£m b·∫£o h√†m n√†y ch·∫°y l·∫°i khi userId thay ƒë·ªïi

  // H√†m t√≠nh to√°n v√† hi·ªÉn th·ªã tr·∫°ng th√°i ho·∫°t ƒë·ªông c·ªßa ng∆∞·ªùi d√πng d·ª±a tr√™n th·ªùi gian lastActive
  const getStatusText = () => {
    // N·∫øu kh√¥ng c√≥ gi√° tr·ªã lastActive (v√≠ d·ª•: v·ª´a m·ªõi ƒëƒÉng nh·∫≠p), hi·ªÉn th·ªã "ƒêang ho·∫°t ƒë·ªông"
    if (!lastActive) return 'ƒêang ho·∫°t ƒë·ªông';

    // L·∫•y th·ªùi gian hi·ªán t·∫°i (theo ƒë∆°n v·ªã milliseconds)
    const now = Date.now();

    // T√≠nh s·ª± ch√™nh l·ªách gi·ªØa th·ªùi gian hi·ªán t·∫°i v√† th·ªùi gian lastActive
    const diff = now - lastActive;

    // N·∫øu th·ªùi gian ch√™nh l·ªách d∆∞·ªõi 10 gi√¢y, hi·ªÉn th·ªã "ƒêang ho·∫°t ƒë·ªông"
    if (diff < 10000) return 'ƒêang ho·∫°t ƒë·ªông';

    // N·∫øu th·ªùi gian ch√™nh l·ªách t·ª´ 10 gi√¢y ƒë·∫øn 1 ph√∫t, hi·ªÉn th·ªã "V·ª´a m·ªõi truy c·∫≠p"
    if (diff < 60000) return 'V·ª´a m·ªõi truy c·∫≠p';

    // N·∫øu th·ªùi gian ch√™nh l·ªách t·ª´ 1 ph√∫t ƒë·∫øn 1 gi·ªù, hi·ªÉn th·ªã s·ªë ph√∫t tr∆∞·ªõc ƒë√≥ ng∆∞·ªùi d√πng ƒë√£ ho·∫°t ƒë·ªông
    if (diff < 3600000)
      return `Ho·∫°t ƒë·ªông ${Math.floor(diff / 60000)} ph√∫t tr∆∞·ªõc`;

    // N·∫øu th·ªùi gian ch√™nh l·ªách t·ª´ 1 gi·ªù ƒë·∫øn 24 gi·ªù, hi·ªÉn th·ªã s·ªë gi·ªù tr∆∞·ªõc ƒë√≥ ng∆∞·ªùi d√πng ƒë√£ ho·∫°t ƒë·ªông
    if (diff < 86400000)
      return `Ho·∫°t ƒë·ªông ${Math.floor(diff / 3600000)} gi·ªù tr∆∞·ªõc`;

    // N·∫øu th·ªùi gian ch√™nh l·ªách l·ªõn h∆°n 24 gi·ªù, hi·ªÉn th·ªã s·ªë ng√†y tr∆∞·ªõc ƒë√≥ ng∆∞·ªùi d√πng ƒë√£ ho·∫°t ƒë·ªông
    return `Ho·∫°t ƒë·ªông ${Math.floor(diff / 86400000)} ng√†y tr∆∞·ªõc`;
  };

  const prevMessagesRef = useRef([]);

  useEffect(() => {
    const typingRef = database().ref(`/chats/${chatId}/typing`);
    const messagesRef = database().ref(`/chats/${chatId}/messages`);

    // üü¢ L·∫Øng nghe tr·∫°ng th√°i ƒëang nh·∫≠p
    const onTypingChange = snapshot => {
      if (snapshot.exists()) {
        const typingData = snapshot.val();
        setIsTyping(typingData.isTyping && typingData.userId !== myId);
      } else {
        setIsTyping(false);
      }
    };

    // üü¢ L·∫Øng nghe khi c√≥ tin nh·∫Øn m·ªõi ƒë∆∞·ª£c th√™m v√†o
    const onNewMessage = async snapshot => {
      if (!snapshot.exists()) return;

      try {
        const msgId = snapshot.key;
        const msgData = snapshot.val();
        if (!msgData || msgData.deleted) return; // B·ªè qua n·∫øu tin nh·∫Øn ƒë√£ b·ªã x√≥a

        const newMessage = {
          id: msgId,
          senderId: msgData.senderId,
          text: msgData.text ? decryptMessage(msgData.text, secretKey) : 'üì∑ ·∫¢nh m·ªõi',
          imageUrl: msgData.imageUrl || null,
          timestamp: msgData.timestamp,
          selfDestruct: msgData.selfDestruct || false,
          selfDestructTime: msgData.selfDestructTime || null,
          seen: msgData.seen || {},
          deleted: msgData.deleted || false,
          isLocked: msgData.isLockedBy?.[myId] ?? msgData.selfDestruct,
          deletedBy: msgData.deletedBy || {},
        };

        console.log('üì© Tin nh·∫Øn m·ªõi t·ª´ Firebase:', newMessage);

        // üî• L·∫•y tin nh·∫Øn c≈© t·ª´ AsyncStorage
        const storedMessages = await AsyncStorage.getItem(`messages_${chatId}`);
        let oldMessages = storedMessages ? JSON.parse(storedMessages) : [];

        // Ki·ªÉm tra n·∫øu tin nh·∫Øn ƒë√£ t·ªìn t·∫°i, th√¨ c·∫≠p nh·∫≠t thay v√¨ th√™m m·ªõi
        const messageIndex = oldMessages.findIndex(msg => msg.id === newMessage.id);
        if (messageIndex !== -1) {
          oldMessages[messageIndex] = newMessage; // C·∫≠p nh·∫≠t tin nh·∫Øn
        } else {
          oldMessages = [...oldMessages, newMessage]; // Th√™m tin nh·∫Øn m·ªõi v√†o danh s√°ch
        }

        oldMessages.sort((a, b) => a.timestamp - b.timestamp); // S·∫Øp x·∫øp theo th·ªùi gian

        console.log("üîÑ Danh s√°ch tin nh·∫Øn sau khi c·∫≠p nh·∫≠t:", oldMessages);

        // üî• L∆∞u l·∫°i v√†o AsyncStorage ƒë·ªÉ d·ª± ph√≤ng n·∫øu Firebase m·∫•t d·ªØ li·ªáu
        await AsyncStorage.setItem(`messages_${chatId}`, JSON.stringify(oldMessages));

        // üîÑ C·∫≠p nh·∫≠t UI v·ªõi tin nh·∫Øn m·ªõi ho·∫∑c thay ƒë·ªïi
        setMessages([...oldMessages]);
      } catch (error) {
        console.error('‚ùå L·ªói khi x·ª≠ l√Ω tin nh·∫Øn m·ªõi:', error);
      }
    };

    // üü¢ L·∫Øng nghe khi m·ªôt tin nh·∫Øn b·ªã thay ƒë·ªïi (v√≠ d·ª•: ƒë√£ xem, b·ªã ch·ªânh s·ª≠a)
    const onMessageChanged = async snapshot => {
      if (!snapshot.exists()) return;

      try {
        const msgId = snapshot.key;
        const msgData = snapshot.val();
        if (!msgData) return;

        console.log(`üîÑ C·∫≠p nh·∫≠t tin nh·∫Øn ${msgId}:`, msgData);

        // üî• T·∫°o b·∫£n sao m·ªõi c·ªßa tin nh·∫Øn
        const updatedMessage = {
          id: msgId,
          senderId: msgData.senderId,
          text: msgData.text ? decryptMessage(msgData.text, secretKey) : '',
          imageUrl: msgData.imageUrl || null,
          timestamp: msgData.timestamp,
          selfDestruct: msgData.selfDestruct || false,
          selfDestructTime: msgData.selfDestructTime || null,
          seen: msgData.seen || {},
          deleted: msgData.deleted || false,
          isLocked: msgData.isLockedBy?.[myId] ?? msgData.selfDestruct,
          deletedBy: msgData.deletedBy || {},
        };

        // üî• L·∫•y danh s√°ch tin nh·∫Øn t·ª´ AsyncStorage
        const storedMessages = await AsyncStorage.getItem(`messages_${chatId}`);
        let oldMessages = storedMessages ? JSON.parse(storedMessages) : [];

        // Ki·ªÉm tra xem tin nh·∫Øn c√≥ t·ªìn t·∫°i kh√¥ng
        const messageIndex = oldMessages.findIndex(msg => msg.id === msgId);
        if (messageIndex !== -1) {
          oldMessages[messageIndex] = updatedMessage;
        } else {
          oldMessages = [...oldMessages, updatedMessage]; // N·∫øu tin nh·∫Øn m·ªõi, th√™m v√†o danh s√°ch
        }

        oldMessages.sort((a, b) => a.timestamp - b.timestamp);

        // üî• L∆∞u v√†o AsyncStorage
        await AsyncStorage.setItem(`messages_${chatId}`, JSON.stringify(oldMessages));

        // üîÑ C·∫≠p nh·∫≠t UI ngay l·∫≠p t·ª©c (S·ª¨A L·ªñI newMessage)
        setMessages(prevMessages => {
          const exists = prevMessages.some(msg => msg.id === updatedMessage.id);
          return exists ? prevMessages.map(msg => (msg.id === updatedMessage.id ? updatedMessage : msg)) : [...prevMessages, updatedMessage];
        });

      } catch (error) {
        console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t tin nh·∫Øn:', error);
      }
    };



    // üü¢ ƒêƒÉng k√Ω l·∫Øng nghe s·ª± ki·ªán t·ª´ Firebase
    typingRef.on('value', onTypingChange);
    messagesRef.on('child_added', onNewMessage); // L·∫Øng nghe tin nh·∫Øn m·ªõi
    messagesRef.on('child_changed', onMessageChanged); // L·∫Øng nghe thay ƒë·ªïi tin nh·∫Øn

    return () => {
      typingRef.off('value', onTypingChange);
      messagesRef.off('child_added', onNewMessage);
      messagesRef.off('child_changed', onMessageChanged);
    };
  }, [chatId, secretKey]);



  useEffect(() => {
    console.log("üõ† Gi√° tr·ªã ban ƒë·∫ßu c·ªßa messages:", messages);
  }, [messages]);


  useEffect(() => {
    if (!myId) return;

    const userRef = database().ref(`/users/${myId}/countChat`);
    const fetchUserData = async () => {
      const snapshot = await userRef.once('value');
      if (snapshot.exists()) {
        setcountChat(snapshot.val());
      }
    };

    fetchUserData();

    return () => userRef.off();
  }, [myId, database]); //  Th√™m dependency




  const formatCountdown = seconds => {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    const secs = seconds % 60;
    return `${hours}h ${minutes}m ${secs}s`;
  };

  const sendMessage = useCallback(async () => {
    if (!text.trim() || isSending) return; // Ki·ªÉm tra n·∫øu tin nh·∫Øn r·ªóng ho·∫∑c ƒëang g·ª≠i th√¨ ch·∫∑n g·ª≠i

    if (countChat === 0) {
      Alert.alert('Th√¥ng b√°o', 'B·∫°n ƒë√£ h·∫øt l∆∞·ª£t nh·∫Øn tin!');
      return;
    }

    setIsSending(true); // ƒê√°nh d·∫•u tr·∫°ng th√°i ƒëang g·ª≠i ƒë·ªÉ tr√°nh spam g·ª≠i li√™n t·ª•c

    try {
      const userRef = database().ref(`/users/${myId}`);
      const chatRef = database().ref(`/chats/${chatId}`);

      // L·∫•y d·ªØ li·ªáu ng∆∞·ªùi d√πng v√† ki·ªÉm tra n·∫øu cu·ªôc tr√≤ chuy·ªán ƒë√£ t·ªìn t·∫°i
      const [userSnapshot, chatSnapshot] = await Promise.all([
        userRef.once('value'),
        chatRef.once('value'),
      ]);

      if (!userSnapshot.exists()) {
        Alert.alert('L·ªói', 'Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng.');
        return;
      }

      let { countChat = 100 } = userSnapshot.val();

      // T·∫°o timestamp chung t·ª´ Firebase ƒë·ªÉ ƒë·ªìng b·ªô th·ªùi gian
      const currentTimestamp = Date.now();

      // N·∫øu cu·ªôc tr√≤ chuy·ªán ch∆∞a t·ªìn t·∫°i, t·∫°o m·ªõi
      if (!chatSnapshot.exists()) {
        await chatRef.set({ users: { [userId]: true, [myId]: true } });
      }

      // M√£ h√≥a tin nh·∫Øn tr∆∞·ªõc khi g·ª≠i
      const encryptedText = encryptMessage(text, secretKey);
      const messageRef = chatRef.child('messages').push(); // T·∫°o reference cho tin nh·∫Øn m·ªõi
      const messageId = messageRef.key; // L·∫•y ID tin nh·∫Øn duy nh·∫•t t·ª´ Firebase
      const messageData = {
        id: messageId, // ƒê·∫£m b·∫£o ID kh√¥ng b·ªã tr√πng
        senderId: myId,
        text: encryptedText || 'üîí Tin nh·∫Øn m√£ h√≥a',
        TimeLeft: isSelfDestruct ? selfDestructTime : null, // üî• Kh√¥ng c·∫ßn set null th·ªß c√¥ng n·∫øu kh√¥ng c√≥ self-destruct
        deletedBy: {},
        timestamp: currentTimestamp,
        selfDestruct: isSelfDestruct,
        selfDestructTime: isSelfDestruct ? selfDestructTime : null,
        seen: { [userId]: false, [myId]: true },
        isLockedBy: { [userId]: true, [myId]: true }, // üîí Ch·ªâ kh√≥a n·∫øu tin nh·∫Øn t·ª± h·ªßy
      };

      // G·ª≠i tin nh·∫Øn l√™n Firebase
      await messageRef.set(messageData);

      setText(''); // X√≥a n·ªôi dung nh·∫≠p v√†o sau khi g·ª≠i
      await userRef.update({ countChat: countChat - 1 });
      setcountChat(countChat - 1);
    } catch (error) {
      console.error('‚ùå L·ªói khi g·ª≠i tin nh·∫Øn:', error);
    } finally {
      setTimeout(() => setIsSending(false), 1000); // Cho ph√©p g·ª≠i l·∫°i sau 1 gi√¢y
    }
  }, [text, chatId, secretKey, isSelfDestruct, selfDestructTime, isSending]);

  //H√†m x·ª≠ l√Ω khi ng∆∞·ªùi d√πng ƒëang nh·∫≠p tin nh·∫Øn
  const handleTyping = isTyping => {
    database()
      .ref(`/chats/${chatId}`)
      .update({
        typing: {
          userId: myId,
          isTyping: isTyping,
        },
        users: { [userId]: true, [myId]: true },
      });
  };

  //H√†m x·ª≠ l√Ω khi ng∆∞·ªùi d√πng ch·ªçn th·ªùi gian t·ª± h·ªßy tin nh·∫Øn
  const handleSelectTime = selectedTime => {
    if (selectedTime === null) {
      setIsSelfDestruct(false);
      setSelfDestructTime(null);
    } else {
      setSelfDestructTime(selectedTime);
      setIsSelfDestruct(true);
    }
    setIsModalVisible(false); // ƒê√≥ng modal sau khi ch·ªçn
  };

  // useEffect ƒë·ªÉ l·∫•y danh s√°ch ng∆∞·ªùi d√πng t·ª´ AsyncStorage khi component ƒë∆∞·ª£c mount
  useEffect(() => {
    const fetchUsers = async () => {
      const data = await getChatsByIdUserAsynStorage();
      // console.log('D·ªØ  AsyncStorage:', data);
      setUser(data.messages);
    };

    fetchUsers();
  }, []);

  // Khi countChat v·ªÅ 0, c·∫≠p nh·∫≠t timeReset tr√™n Firebase (l∆∞u th·ªùi gian reset d∆∞·ªõi d·∫°ng timestamp)
  const resetDuration = 24 * 60 * 60; // 86400 gi√¢y, t·ª©c 24 gi·ªù
  const [resetCountdown, setResetCountdown] = useState(null);

  useEffect(() => {
    const userTimeResetRef = database().ref(`/users/${myId}/timeReset`);

    userTimeResetRef.once('value').then(snapshot => {
      const serverTimeReset = snapshot.val(); // L·∫•y timestamp t·ª´ Firebase
      const currentTime = Date.now();

      if (serverTimeReset) {
        // T√≠nh s·ªë gi√¢y c√≤n l·∫°i d·ª±a tr√™n th·ªùi gian hi·ªán t·∫°i v√† timestamp t·ª´ Firebase
        const timeLeft = Math.max(
          0,
          Math.floor((serverTimeReset - currentTime) / 1000),
        );
        setResetCountdown(timeLeft);
      } else {
        // N·∫øu ch∆∞a c√≥ timeReset tr√™n Firebase, thi·∫øt l·∫≠p m·ªõi
        const timeResetValue = currentTime + resetDuration * 1000;
        database().ref(`/users/${myId}`).update({ timeReset: timeResetValue });
        setResetCountdown(resetDuration);
      }
    });
  }, [countChat, myId]);

  // H√†m ch·∫°y interval ƒë·ªÉ ƒë·∫øm ng∆∞·ª£c m·ªói gi√¢y
  useEffect(() => {
    if (resetCountdown > 0) {
      const interval = setInterval(() => {
        setResetCountdown(prev => (prev > 0 ? prev - 1 : 0));
      }, 1000);

      return () => clearInterval(interval);
    }
  }, [resetCountdown]);

  // C·∫≠p nh·∫≠t ƒë·ªìng h·ªì ƒë·∫øm ng∆∞·ª£c m·ªói gi√¢y v√† reset khi h·∫øt th·ªùi gian
  useEffect(() => {
    if (resetCountdown !== null) {
      const intervalId = setInterval(() => {
        setResetCountdown(prev => {
          if (prev <= 1) {
            // Khi countdown h·∫øt, reset l∆∞·ª£t chat v√† x√≥a timeReset tr√™n Firebase
            database().ref(`/users/${myId}`).update({ countChat: 100 });
            database().ref(`/users/${myId}/timeReset`).remove();
            setcountChat(100);
            clearInterval(intervalId);
            return null;
          }
          return prev - 1;
        });
      }, 1000);
      return () => clearInterval(intervalId);
    }
  }, [resetCountdown, myId]);

  // useEffect ƒë·ªÉ t·∫£i danh s√°ch chat t·ª´ AsyncStorage v√† Firebase khi component ƒë∆∞·ª£c mount
  useEffect(() => {
    const loadChats = async () => {
      try {
        const storedChats = await AsyncStorage.getItem('chatList');
        let chatListFromStorage = storedChats ? JSON.parse(storedChats) : [];

        const currentUserId = auth().currentUser?.uid;
        if (!currentUserId) return;

        const chatRef = database().ref('chats');

        database()
          .ref('chats')
          .on('value', async snapshot => {
            if (!snapshot.exists()) {
              console.log(
                'üî• Firebase kh√¥ng c√≥ d·ªØ li·ªáu, hi·ªÉn th·ªã t·ª´ AsyncStorage.',
              );
              setChatList(chatListFromStorage); //  N·∫øu Firebase m·∫•t d·ªØ li·ªáu, gi·ªØ d·ªØ li·ªáu c≈©
              return;
            }

            const chatsData = snapshot.val();
            // L·∫•y d·ªØ li·ªáu c·ªßa c√°c cu·ªôc tr√≤ chuy·ªán t·ª´ snapshot Firebase. `snapshot.val()` tr·∫£ v·ªÅ to√†n b·ªô d·ªØ li·ªáu d∆∞·ªõi d·∫°ng m·ªôt ƒë·ªëi t∆∞·ª£ng.

            const chatEntries = Object.entries(chatsData);
            // Chuy·ªÉn ƒë·ªëi t∆∞·ª£ng `chatsData` th√†nh m·ªôt m·∫£ng c√°c c·∫∑p key-value, trong ƒë√≥ key l√† `chatId` v√† value l√† d·ªØ li·ªáu c·ªßa cu·ªôc tr√≤ chuy·ªán.

            const chatPromises = chatEntries.map(async ([chatId, chat]) => {
              // Duy·ªát qua t·ª´ng c·∫∑p `chatId` v√† d·ªØ li·ªáu c·ªßa cu·ªôc tr√≤ chuy·ªán `chat`, t·∫°o ra m·ªôt danh s√°ch c√°c promise x·ª≠ l√Ω b·∫•t ƒë·ªìng b·ªô cho t·ª´ng cu·ªôc tr√≤ chuy·ªán.

              if (!chat.users || !chat.users[currentUserId]) return null;
              // Ki·ªÉm tra xem cu·ªôc tr√≤ chuy·ªán c√≥ danh s√°ch ng∆∞·ªùi d√πng hay kh√¥ng v√† ng∆∞·ªùi d√πng hi·ªán t·∫°i c√≥ tham gia cu·ªôc tr√≤ chuy·ªán kh√¥ng. N·∫øu kh√¥ng, b·ªè qua cu·ªôc tr√≤ chuy·ªán n√†y.

              const otherUserId = Object.keys(chat.users).find(
                uid => uid !== currentUserId,
              );
              // L·∫•y ID c·ªßa ng∆∞·ªùi d√πng c√≤n l·∫°i trong cu·ªôc tr√≤ chuy·ªán (ng∆∞·ªùi m√† b·∫°n ƒëang chat) b·∫±ng c√°ch l·ªçc ra userId kh√°c v·ªõi `currentUserId`.

              if (!otherUserId) return null;
              // N·∫øu kh√¥ng t√¨m th·∫•y `otherUserId`, b·ªè qua cu·ªôc tr√≤ chuy·ªán n√†y.

              const secretKey = generateSecretKey(otherUserId, currentUserId);
              // T·∫°o secretKey cho cu·ªôc tr√≤ chuy·ªán d·ª±a tr√™n ID c·ªßa ng∆∞·ªùi d√πng kh√°c v√† ID c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i, d√πng ƒë·ªÉ m√£ h√≥a v√† gi·∫£i m√£ tin nh·∫Øn.

              const userRef = database().ref(`users/${otherUserId}`);
              // T·∫°o reference t·ªõi th√¥ng tin ng∆∞·ªùi d√πng c√≤n l·∫°i trong cu·ªôc tr√≤ chuy·ªán (otherUserId) trong c∆° s·ªü d·ªØ li·ªáu Firebase.

              const userSnapshot = await userRef.once('value');
              // L·∫•y d·ªØ li·ªáu c·ªßa ng∆∞·ªùi d√πng kh√°c t·ª´ Firebase ch·ªâ m·ªôt l·∫ßn (kh√¥ng theo d√µi th·ªùi gian th·ª±c).

              if (!userSnapshot.exists()) return null;
              // N·∫øu d·ªØ li·ªáu ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i, b·ªè qua cu·ªôc tr√≤ chuy·ªán n√†y.

              const userInfo = userSnapshot.val();
              // L·∫•y th√¥ng tin chi ti·∫øt c·ªßa ng∆∞·ªùi d√πng kh√°c t·ª´ snapshot.

              const decryptedName = safeDecrypt(userInfo?.name);
              // Gi·∫£i m√£ t√™n c·ªßa ng∆∞·ªùi d√πng kh√°c (n·∫øu c√≥) b·∫±ng c√°ch s·ª≠ d·ª•ng h√†m `safeDecrypt`.

              const decryptedImage = safeDecrypt(userInfo?.Image);
              // Gi·∫£i m√£ ·∫£nh ƒë·∫°i di·ªán c·ªßa ng∆∞·ªùi d√πng kh√°c (n·∫øu c√≥) b·∫±ng c√°ch s·ª≠ d·ª•ng h√†m `safeDecrypt`.

              let lastMessage = '';
              let lastMessageTime = '';
              let lastMessageTimestamp = 0;
              let unreadCount = 0;
              let lastMessageId = null;
              let isSeen = true;
              // Kh·ªüi t·∫°o c√°c bi·∫øn ƒë·ªÉ l∆∞u tr·ªØ th√¥ng tin v·ªÅ tin nh·∫Øn cu·ªëi c√πng, th·ªùi gian c·ªßa tin nh·∫Øn, s·ªë l∆∞·ª£ng tin nh·∫Øn ch∆∞a ƒë·ªçc v√† tr·∫°ng th√°i ƒë√£ xem c·ªßa tin nh·∫Øn.

              const messagesRef = database().ref(`chats/${chatId}/messages`);
              // T·∫°o reference ƒë·∫øn danh s√°ch tin nh·∫Øn c·ªßa cu·ªôc tr√≤ chuy·ªán (chatId) trong c∆° s·ªü d·ªØ li·ªáu Firebase.

              const messagesSnapshot = await messagesRef.once('value');
              // L·∫•y d·ªØ li·ªáu c·ªßa t·∫•t c·∫£ c√°c tin nh·∫Øn trong cu·ªôc tr√≤ chuy·ªán t·ª´ Firebase ch·ªâ m·ªôt l·∫ßn.

              if (messagesSnapshot.exists()) {
                // Ki·ªÉm tra xem c√≥ tin nh·∫Øn n√†o trong cu·ªôc tr√≤ chuy·ªán n√†y kh√¥ng.

                const messagesData = messagesSnapshot.val();
                // L·∫•y d·ªØ li·ªáu c·ªßa c√°c tin nh·∫Øn t·ª´ snapshot.

                const sortedMessages = Object.entries(messagesData)
                  .map(([msgId, msg]) => ({ msgId, ...msg }))
                  .sort((a, b) => b.timestamp - a.timestamp);
                // S·∫Øp x·∫øp c√°c tin nh·∫Øn theo th·ª© t·ª± gi·∫£m d·∫ßn d·ª±a tr√™n timestamp (th·ªùi gian g·ª≠i tin nh·∫Øn).

                if (sortedMessages.length > 0) {
                  // N·∫øu c√≥ √≠t nh·∫•t m·ªôt tin nh·∫Øn trong cu·ªôc tr√≤ chuy·ªán.

                  const latestMessage = sortedMessages[0];
                  // L·∫•y tin nh·∫Øn m·ªõi nh·∫•t (tin nh·∫Øn ƒë·∫ßu ti√™n sau khi s·∫Øp x·∫øp).

                  lastMessageId = latestMessage.msgId;
                  // L∆∞u l·∫°i ID c·ªßa tin nh·∫Øn cu·ªëi c√πng.

                  lastMessage =
                    decryptMessage(latestMessage.text, secretKey) ||
                    'Tin nh·∫Øn b·ªã m√£ h√≥a';
                  // Gi·∫£i m√£ n·ªôi dung tin nh·∫Øn cu·ªëi c√πng b·∫±ng c√°ch s·ª≠ d·ª•ng kh√≥a b√≠ m·∫≠t (secretKey), n·∫øu kh√¥ng gi·∫£i m√£ ƒë∆∞·ª£c th√¨ hi·ªÉn th·ªã th√¥ng b√°o "Tin nh·∫Øn b·ªã m√£ h√≥a".

                  lastMessageTime = new Date(
                    latestMessage.timestamp,
                  ).toLocaleTimeString([], {
                    hour: '2-digit',
                    minute: '2-digit',
                  });
                  // Chuy·ªÉn ƒë·ªïi timestamp c·ªßa tin nh·∫Øn cu·ªëi c√πng th√†nh th·ªùi gian ƒë·ªãnh d·∫°ng gi·ªù v√† ph√∫t.

                  lastMessageTimestamp = latestMessage.timestamp;
                  // L∆∞u l·∫°i timestamp c·ªßa tin nh·∫Øn cu·ªëi c√πng.

                  isSeen = latestMessage?.seen?.[currentUserId] || false;
                  // Ki·ªÉm tra xem tin nh·∫Øn cu·ªëi c√πng ƒë√£ ƒë∆∞·ª£c ng∆∞·ªùi d√πng hi·ªán t·∫°i ƒë·ªçc ch∆∞a, d·ª±a tr√™n th√¥ng tin "seen" c·ªßa tin nh·∫Øn.

                  unreadCount = isSeen
                    ? 0
                    : sortedMessages.filter(
                      msg =>
                        msg.senderId !== currentUserId &&
                        !msg.seen?.[currentUserId],
                    ).length;
                }
              }

              return {
                chatId,
                id: otherUserId,
                name: decryptedName || 'Ng∆∞·ªùi d√πng',
                img: decryptedImage || 'https://example.com/default-avatar.png',
                text: lastMessage,
                time: lastMessageTime,
                timestamp: lastMessageTimestamp,
                unreadCount,
                lastMessageId,
                isSeen,
              };
              // Tr·∫£ v·ªÅ ƒë·ªëi t∆∞·ª£ng ch·ª©a th√¥ng tin cu·ªôc tr√≤ chuy·ªán: ID ph√≤ng chat, ID ng∆∞·ªùi d√πng kh√°c, t√™n, ·∫£nh, tin nh·∫Øn cu·ªëi c√πng, th·ªùi gian g·ª≠i tin nh·∫Øn, s·ªë tin nh·∫Øn ch∆∞a ƒë·ªçc, ID tin nh·∫Øn cu·ªëi c√πng, v√† tr·∫°ng th√°i ƒë√£ xem.
            });

            const resolvedChats = await Promise.all(chatPromises);
            // Th·ª±c thi t·∫•t c·∫£ c√°c promise l·∫•y th√¥ng tin cu·ªôc tr√≤ chuy·ªán v√† ƒë·ª£i t·∫•t c·∫£ ch√∫ng ho√†n th√†nh, k·∫øt qu·∫£ l√† m·ªôt m·∫£ng c√°c cu·ªôc tr√≤ chuy·ªán ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω.

            let filteredChats = resolvedChats
              .filter(Boolean)
              // L·ªçc b·ªè nh·ªØng cu·ªôc tr√≤ chuy·ªán kh√¥ng h·ª£p l·ªá (nh·ªØng gi√° tr·ªã null).

              .sort((a, b) => b.timestamp - a.timestamp);
            // S·∫Øp x·∫øp c√°c cu·ªôc tr√≤ chuy·ªán theo th·ª© t·ª± th·ªùi gian, cu·ªôc tr√≤ chuy·ªán m·ªõi nh·∫•t s·∫Ω ·ªü tr√™n c√πng.

            if (filteredChats.length === 0) {
              console.log('üî• Firebase m·∫•t d·ªØ li·ªáu, gi·ªØ l·∫°i danh s√°ch c≈©.');
              filteredChats = chatListFromStorage; //  D√πng d·ªØ li·ªáu c≈© n·∫øu Firebase m·∫•t d·ªØ li·ªáu
            }

            await AsyncStorage.setItem(
              'chatList',
              JSON.stringify(filteredChats),
            );
            setChatList(filteredChats);
            setStorageChanged(prev => !prev);
          });
      } catch (error) {
        console.error('‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu:', error);
      }
    };

    loadChats();
  }, []);

  const safeDecrypt = (encryptedText, secretKey) => {
    try {
      if (!encryptedText) return 'N·ªôi dung tr·ªëng';

      const decryptedText = decryptMessage(encryptedText, secretKey);

      if (!decryptedText || decryptedText === '') {
        return 'Tin nh·∫Øn b·ªã m√£ h√≥a';
      }

      return decryptedText;
    } catch (error) {
      return 'Tin nh·∫Øn b·ªã m√£ h√≥a';
    }
  };

  const pickImage = () => {
    const options = {
      mediaType: 'photo',
      quality: 1,
    };

    launchImageLibrary(options, response => {
      if (response.didCancel) return;
      if (response.errorMessage) {
        Alert.alert('L·ªói', response.errorMessage);
        return;
      }

      if (response.assets && response.assets.length > 0) {
        const imageUri = response.assets[0].uri;
        uploadImageToCloudinary(imageUri);
      }
    });
  };

  const uploadImageToCloudinary = async imageUri => {
    try {
      setLoadingImageUrl(imageUri); // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒëang g·ª≠i ·∫£nh

      // ‚úÖ Th√™m tin nh·∫Øn t·∫°m v√†o danh s√°ch tin nh·∫Øn
      const tempMessageId = `temp-${Date.now()}`;
      const tempMessage = {
        id: tempMessageId, // ID t·∫°m th·ªùi
        senderId: myId,
        imageUrl: imageUri,
        timestamp: Date.now(),
        isLoading: true, // ‚úÖ ƒê√°nh d·∫•u l√† tin nh·∫Øn ƒëang t·∫£i
      };
      setMessages(prev => [...prev, tempMessage]);

      const formData = new FormData();
      formData.append('file', {
        uri: imageUri,
        type: 'image/jpeg',
        name: 'upload.jpg',
      });
      formData.append('upload_preset', CLOUDINARY_PRESET);

      const response = await fetch(CLOUDINARY_URL, {
        method: 'POST',
        body: formData,
      });

      const data = await response.json();
      if (data.secure_url) {
        console.log('‚úÖ ·∫¢nh ƒë√£ t·∫£i l√™n Cloudinary:', data.secure_url);

        // ‚úÖ C·∫≠p nh·∫≠t tin nh·∫Øn t·∫°m v·ªõi ·∫£nh th·∫≠t v√† t·∫Øt loading
        setMessages(prev =>
          prev.map(msg =>
            msg.id === tempMessageId
              ? { ...msg, imageUrl: data.secure_url, isLoading: false }
              : msg,
          ),
        );

        sendImageMessage(data.secure_url, tempMessageId);
      } else {
        throw new Error('L·ªói khi t·∫£i ·∫£nh l√™n Cloudinary');
      }
    } catch (error) {
      console.error('‚ùå L·ªói khi upload ·∫£nh:', error);
    } finally {
      setLoadingImageUrl(null); // X√≥a tr·∫°ng th√°i loading khi ho√†n t·∫•t
    }
  };

  // H√†m g·ª≠i tin nh·∫Øn ·∫£nh
  const sendImageMessage = async imageUrl => {
    // Ki·ªÉm tra n·∫øu URL ·∫£nh kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒëang g·ª≠i ·∫£nh th√¨ kh√¥ng l√†m g√¨ v√† tho√°t kh·ªèi h√†m
    if (!imageUrl || isSending) return;
    // ƒê·∫∑t tr·∫°ng th√°i isSending th√†nh true ƒë·ªÉ tr√°nh g·ª≠i li√™n t·ª•c nhi·ªÅu ·∫£nh trong khi ƒëang x·ª≠ l√Ω
    setIsSending(true);

    try {
      // T·∫°o m·ªôt reference m·ªõi trong Firebase Realtime Database cho tin nh·∫Øn ·∫£nh
      const chatRef = database().ref(`/chats/${chatId}/messages`).push();
      // L·∫•y timestamp hi·ªán t·∫°i ƒë·ªÉ l∆∞u l·∫°i th·ªùi gian g·ª≠i tin nh·∫Øn
      const timestamp = Date.now();

      // T·∫°o d·ªØ li·ªáu cho tin nh·∫Øn ·∫£nh
      const messageData = {
        senderId: myId, // ID c·ªßa ng∆∞·ªùi g·ª≠i
        imageUrl: imageUrl, // URL c·ªßa ·∫£nh ƒë√£ ch·ªçn
        timestamp: timestamp, // Th·ªùi gian g·ª≠i tin nh·∫Øn
        seen: { [myId]: true, [userId]: false }, // Tr·∫°ng th√°i ƒë√£ xem c·ªßa tin nh·∫Øn (ng∆∞·ªùi g·ª≠i ƒë√£ xem, ng∆∞·ªùi nh·∫≠n ch∆∞a xem)
        selfDestruct: isSelfDestruct, // Ki·ªÉm tra xem tin nh·∫Øn c√≥ ch·∫ø ƒë·ªô t·ª± h·ªßy kh√¥ng
        selfDestructTime: isSelfDestruct ? selfDestructTime : null, // N·∫øu t·ª± h·ªßy b·∫≠t, th√¨ l∆∞u th·ªùi gian t·ª± h·ªßy
      };

      // G·ª≠i tin nh·∫Øn ·∫£nh l√™n Firebase b·∫±ng c√°ch l∆∞u d·ªØ li·ªáu v√†o reference ƒë√£ t·∫°o
      await chatRef.set(messageData);
      console.log('‚úÖ ·∫¢nh ƒë√£ g·ª≠i v√†o Firebase:', imageUrl); // In ra console URL ·∫£nh ƒë√£ g·ª≠i

      // üî• L·∫•y c√°c tin nh·∫Øn c≈© t·ª´ AsyncStorage ƒë·ªÉ chu·∫©n b·ªã c·∫≠p nh·∫≠t danh s√°ch tin nh·∫Øn
      const storedMessages = await AsyncStorage.getItem(`messages_${chatId}`);
      const oldMessages = storedMessages ? JSON.parse(storedMessages) : []; // Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu l∆∞u tr·ªØ t·ª´ chu·ªói JSON th√†nh m·∫£ng tin nh·∫Øn c≈©

      // ƒê·∫£m b·∫£o d·ªØ li·ªáu tin nh·∫Øn ·∫£nh ƒë∆∞·ª£c l∆∞u v√†o Firebase (c√≥ th·ªÉ do double-setting tr∆∞·ªõc ƒë√≥)
      await chatRef.set(messageData);
      // Sau khi g·ª≠i xong, ƒë·∫∑t l·∫°i tr·∫°ng th√°i isSending th√†nh false ƒë·ªÉ c√≥ th·ªÉ g·ª≠i tin nh·∫Øn ti·∫øp theo
      setIsSending(false);
    } catch (error) {
      // N·∫øu c√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh g·ª≠i ·∫£nh, in l·ªói ra console
      console.error('‚ùå L·ªói khi g·ª≠i ·∫£nh:', error);
    } finally {
      // ƒê·∫£m b·∫£o tr·∫°ng th√°i isSending ƒë∆∞·ª£c ƒë·∫∑t l·∫°i sau 1 gi√¢y, cho d√π c√≥ l·ªói hay kh√¥ng
      setTimeout(() => setIsSending(false), 1000);
    }
  };

  const requestStoragePermission = async () => {
    if (Platform.OS === 'android') {
      try {
        if (Platform.Version >= 33) {
          // Android 13+ (API 33+): D√πng quy·ªÅn READ_MEDIA_IMAGES
          const granted = await PermissionsAndroid.request(
            PermissionsAndroid.PERMISSIONS.READ_MEDIA_IMAGES,
            {
              title: 'Quy·ªÅn truy c·∫≠p ·∫£nh',
              message: '·ª®ng d·ª•ng c·∫ßn quy·ªÅn ƒë·ªÉ l∆∞u ·∫£nh v·ªÅ thi·∫øt b·ªã.',
              buttonNeutral: 'H·ªèi l·∫°i sau',
              buttonNegative: 'H·ªßy',
              buttonPositive: 'Cho ph√©p',
            },
          );
          return granted === PermissionsAndroid.RESULTS.GRANTED;
        } else if (Platform.Version >= 29) {
          // Android 10+ (API 29+): D√πng Scoped Storage
          const granted = await PermissionsAndroid.request(
            PermissionsAndroid.PERMISSIONS.WRITE_EXTERNAL_STORAGE,
            {
              title: 'Quy·ªÅn l∆∞u tr·ªØ ·∫£nh',
              message: '·ª®ng d·ª•ng c·∫ßn quy·ªÅn ƒë·ªÉ t·∫£i ·∫£nh v·ªÅ thi·∫øt b·ªã.',
              buttonNeutral: 'H·ªèi l·∫°i sau',
              buttonNegative: 'H·ªßy',
              buttonPositive: 'Cho ph√©p',
            },
          );
          return granted === PermissionsAndroid.RESULTS.GRANTED;
        } else {
          // Android 9 tr·ªü xu·ªëng
          const granted = await PermissionsAndroid.requestMultiple([
            PermissionsAndroid.PERMISSIONS.READ_EXTERNAL_STORAGE,
            PermissionsAndroid.PERMISSIONS.WRITE_EXTERNAL_STORAGE,
          ]);
          return (
            granted[PermissionsAndroid.PERMISSIONS.READ_EXTERNAL_STORAGE] ===
            PermissionsAndroid.RESULTS.GRANTED &&
            granted[PermissionsAndroid.PERMISSIONS.WRITE_EXTERNAL_STORAGE] ===
            PermissionsAndroid.RESULTS.GRANTED
          );
        }
      } catch (err) {
        console.warn('L·ªói khi xin quy·ªÅn:', err);
        return false;
      }
    }
    return true; // iOS kh√¥ng c·∫ßn quy·ªÅn
  };

  const downloadImage = async imageUrl => {
    try {
      const hasPermission = await requestStoragePermission();
      if (!hasPermission) {
        Alert.alert('L·ªói', 'B·∫°n c·∫ßn c·∫•p quy·ªÅn ƒë·ªÉ t·∫£i ·∫£nh.');
        return;
      }
      // L·∫•y t√™n file t·ª´ URL
      const fileName = imageUrl.split('/').pop();
      const downloadPath =
        Platform.OS === 'android'
          ? `${RNFS.DownloadDirectoryPath}/${fileName}` // ‚úÖ S·ª≠a l·∫°i d·∫•u backtick
          : `${RNFS.DocumentDirectoryPath}/${fileName}`; // ‚úÖ S·ª≠a l·∫°i d·∫•u backtick

      const download = RNFS.downloadFile({
        fromUrl: imageUrl,
        toFile: downloadPath,
      });

      await download.promise;

      // üîÑ G·ªçi h√†m l√†m m·ªõi th∆∞ vi·ªán ·∫£nh
      await refreshGallery(downloadPath);

      Alert.alert('Th√†nh c√¥ng', '·∫¢nh ƒë√£ t·∫£i v·ªÅ th∆∞ vi·ªán!');
      console.log('üìÇ ·∫¢nh ƒëang ƒë∆∞·ª£c l∆∞u v√†o:', downloadPath);
    } catch (error) {
      Alert.alert('L·ªói', 'Kh√¥ng th·ªÉ t·∫£i ·∫£nh.');
      console.error('‚ùå L·ªói khi t·∫£i ·∫£nh:', error);
    }
  };

  //f5 l·∫°i cho c√≥ ·∫£nh trong th∆∞ vi·ªán
  const refreshGallery = async filePath => {
    if (Platform.OS === 'android' && RNMediaScanner) {
      try {
        await RNMediaScanner.scanFile(filePath);
        console.log('‚úÖ Th∆∞ vi·ªán ƒë√£ c·∫≠p nh·∫≠t:', filePath);
      } catch (err) {
        console.warn('‚ö†Ô∏è L·ªói c·∫≠p nh·∫≠t th∆∞ vi·ªán:', err);
      }
    } else {
      console.warn('‚ö†Ô∏è RNMediaScanner kh√¥ng kh·∫£ d·ª•ng tr√™n n·ªÅn t·∫£ng n√†y.');
    }
  };

  // useEffect(() => {
  //   const interval = setInterval(() => {
  //     setTimeLefts(prev => {
  //       let updatedTimers = {...prev};

  //       Object.keys(prev).forEach(messageId => {
  //         if (prev[messageId] > 0) {
  //           updatedTimers[messageId] = prev[messageId] - 1;
  //         } else if (prev[messageId] === 0) {
  //           deleteMessageLocally(messageId); // X√≥a ch·ªâ trong AsyncStorage
  //           deleteMessageForUser(messageId)
  //           delete updatedTimers[messageId];
  //         }
  //       });
  //       return updatedTimers;
  //     });
  //   }, 1000);

  //   return () => clearInterval(interval);
  // }, []);

  const handleUnlockMessage = async (messageId, selfDestructTime) => {
    setUnlockedMessages(prev => ({ ...prev, [messageId]: true }));

    setMessages(prev =>
      prev.map(msg => (msg.id === messageId ? { ...msg, isLocked: false } : msg))
    );

    const messageRef = database().ref(
      `/chats/${chatId}/messages/${messageId}/TimeLeft/${myId}`
    );
    const snapshot = await messageRef.once('value');
    const existingExpiry = snapshot.val();

    if (!existingExpiry) {
      const expiryTimestamp = Date.now() + selfDestructTime * 1000;

      // üî• C·∫≠p nh·∫≠t Firebase
      await database().ref(`/chats/${chatId}/messages/${messageId}`).update({
        TimeLeft: { [myId]: expiryTimestamp },
        [`isLockedBy/${myId}`]: true,
      });

      // üî• L∆∞u v√†o AsyncStorage
      await AsyncStorage.setItem(`expiry_${messageId}`, expiryTimestamp.toString());

      // üî• C·∫≠p nh·∫≠t UI v·ªõi countdown
      setTimeLefts(prev => ({ ...prev, [messageId]: selfDestructTime }));

      // ‚úÖ ƒê·∫∑t h·∫πn gi·ªù t·ª± ƒë·ªông kh√≥a l·∫°i tin nh·∫Øn
      setTimeout(() => {
        setMessages(prev =>
          prev.map(msg =>
            msg.id === messageId ? { ...msg, isLocked: true } : msg
          )
        );

        console.log(`üîí Tin nh·∫Øn ${messageId} ƒë√£ t·ª± ƒë·ªông kh√≥a l·∫°i.`);
      }, selfDestructTime * 1000);
    }
  };




  const checkExpiredMessages = async () => {
    const currentTime = Date.now();
    let updatedTimeLefts = {}; // ‚úÖ L∆∞u th·ªùi gian c√≤n l·∫°i

    for (const msg of messages) {
      if (!msg.isLocked && (!msg.deletedBy || !msg.deletedBy[myId])) {
        const expiryTimestamp = await AsyncStorage.getItem(`expiry_${msg.id}`);
        if (expiryTimestamp) {
          const timeLeft = Math.max(0, Math.floor((Number(expiryTimestamp) - currentTime) / 1000));

          if (timeLeft > 0) {
            updatedTimeLefts[msg.id] = timeLeft; // ‚úÖ C·∫≠p nh·∫≠t th·ªùi gian c√≤n l·∫°i
          } else {
            console.log(`üî• Tin nh·∫Øn ${msg.id} ƒë√£ h·∫øt th·ªùi gian, c·∫≠p nh·∫≠t x√≥a`);

            // üî• C·∫≠p nh·∫≠t Firebase
            await database().ref(`/chats/${chatId}/messages/${msg.id}/deletedBy`).update({
              [myId]: true,
            });

            // üîÑ C·∫≠p nh·∫≠t AsyncStorage
            const storedMessages = await AsyncStorage.getItem(`messages_${chatId}`);
            let oldMessages = storedMessages ? JSON.parse(storedMessages) : [];
            const updatedMessages = oldMessages.filter(m => !(m.deletedBy && m.deletedBy[myId]));
            await AsyncStorage.setItem(`messages_${chatId}`, JSON.stringify(updatedMessages));

            setMessages(updatedMessages);
          }
        }
      }
    }

    setTimeLefts(updatedTimeLefts); // ‚úÖ C·∫≠p nh·∫≠t UI v·ªõi countdown
  };

  // G·ªçi khi app m·ªü l·∫°i
  useEffect(() => {
    checkExpiredMessages();
  }, []);



  useEffect(() => {
    const checkExpiryAndUpdate = async () => {
      const currentTime = Date.now();
      let updatedTimeLefts = {};
      let messagesToDelete = [];

      // üîÑ L·∫∑p qua danh s√°ch tin nh·∫Øn ƒë·ªÉ ki·ªÉm tra th·ªùi gian c√≤n l·∫°i
      for (const msg of messages) {
        if (unlockedMessages[msg.id]) {
          const expiryTimestamp = await AsyncStorage.getItem(`expiry_${msg.id}`);
          if (expiryTimestamp) {
            const timeLeft = Math.max(0, Math.floor((Number(expiryTimestamp) - currentTime) / 1000));
            updatedTimeLefts[msg.id] = timeLeft;

            // üî• N·∫øu tin nh·∫Øn ƒë√£ h·∫øt th·ªùi gian, th√™m v√†o danh s√°ch c·∫ßn x√≥a
            if (timeLeft === 0) {
              messagesToDelete.push(msg.id);
            }
          }
        }
      }

      // üî• X√≥a tin nh·∫Øn h·∫øt h·∫°n kh·ªèi Firebase & local c√πng l√∫c
      if (messagesToDelete.length > 0) {
        console.log(`üî• Nh·ªØng tin nh·∫Øn ƒë√£ h·∫øt th·ªùi gian:`, messagesToDelete);

        // C·∫≠p nh·∫≠t Firebase (ƒë√°nh d·∫•u l√† `deleted: true`)
        const updates = {};
        messagesToDelete.forEach(msgId => {
          updates[`/chats/${chatId}/messages/${msgId}/deleted`] = true;
        });
        await database().ref().update(updates);

        // C·∫≠p nh·∫≠t l·∫°i danh s√°ch tin nh·∫Øn tr√™n UI
        setMessages(prevMessages => prevMessages.filter(m => !messagesToDelete.includes(m.id)));

        // X√≥a tin nh·∫Øn kh·ªèi AsyncStorage
        for (const msgId of messagesToDelete) {
          await AsyncStorage.removeItem(`expiry_${msgId}`);
        }
      }

      setTimeLefts(updatedTimeLefts);
    };

    // Ch·∫°y ki·ªÉm tra m·ªói gi√¢y
    const interval = setInterval(checkExpiryAndUpdate, 1000);

    return () => clearInterval(interval);
  }, [messages, unlockedMessages, chatId]);

  // useFocusEffect(
  //   useCallback(() => {
  //     return () => {
  //       setMessages(prevMessages => {
  //         let updatedMessages = prevMessages.map(msg => {
  //           // ‚úÖ N·∫øu tin nh·∫Øn ch∆∞a b·ªã x√≥a, ƒë·∫∑t l·∫°i `isLocked = true` & c·∫≠p nh·∫≠t Firebase
  //           if (!msg.deletedBy || !msg.deletedBy[myId]) {
  //             database()
  //               .ref(`/chats/${chatId}/messages/${msg.id}`)
  //               .update({
  //                 [`isLockedBy.${myId}`]: true, // üî• C·∫≠p nh·∫≠t `isLockedBy` tr√™n Firebase
  //               });

  //             return { ...msg, isLocked: true };
  //           }
  //           return msg; // N·∫øu ƒë√£ b·ªã x√≥a, gi·ªØ nguy√™n
  //         });

  //         // üî• C·∫≠p nh·∫≠t l·∫°i AsyncStorage ƒë·ªÉ l∆∞u tr·∫°ng th√°i kh√≥a
  //         AsyncStorage.setItem(`messages_${chatId}`, JSON.stringify(updatedMessages));

  //         console.log('üîí C·∫≠p nh·∫≠t isLocked & isLockedBy tr√™n Firebase.');
  //         return updatedMessages;
  //       });
  //     };
  //   }, [chatId])
  // );



  return (
    <TouchableWithoutFeedback onPress={Keyboard.dismiss}>
      <View style={styles.container}>
        <View>
          <View style={styles.header}>
            <TouchableOpacity
              onPress={() => navigation.navigate(oStackHome.TabHome.name)}
              style={styles.backButton}>
              <Icon name="arrow-left" size={28} color="#FFFFFF" />
            </TouchableOpacity>

            <View style={styles.userInfo}>
              <Image source={{ uri: img }} style={styles.headerAvatar} />
              <View>
                <Text style={styles.headerUsername}>{username}</Text>
                <View style={styles.statusContainer}>
                  {getStatusText() === 'ƒêang ho·∫°t ƒë·ªông' && (
                    <View style={styles.activeDot} />
                  )}
                  <Text style={styles.userStatus}>{getStatusText()}</Text>
                </View>
              </View>
            </View>

            <View style={styles.chatStatus}>
              {countChat > 0 ? (
                <Text style={styles.chatCountText}>
                  {countChat} l∆∞·ª£t nh·∫Øn tin
                </Text>
              ) : (
                <Text style={styles.resetText}>
                  Reset sau {formatCountdown(resetCountdown)}
                </Text>
              )}
            </View>
          </View>
          {renderPinnedMessages()}
        </View>
        <FlatList
          ref={listRef}
          data={[...messages]
            .filter(
              msg => !msg.deleted && !(msg.deletedBy && msg.deletedBy[myId]),
            )
            .sort((a, b) => b.timestamp - a.timestamp)}
          onScrollBeginDrag={() => setShouldAutoScroll(false)}
          onEndReached={() => setShouldAutoScroll(true)}
          keyExtractor={item => item.id}
          renderItem={({ item }) => {
            const isSentByMe = item.senderId === myId;
            const isSelfDestruct = item.selfDestruct;
            const messageId = item.id;

            const timeLeft =
              isSelfDestruct && !item.isLocked
                ? timeLefts[item.id] !== undefined &&
                  timeLefts[item.id] !== null
                  ? timeLefts[item.id]
                  : item.selfDestructTime || 0
                : null;

            return (
              <View style={{ flexDirection: 'column' }}>
                <View
                  style={
                    isSentByMe ? styles.sentWrapper : styles.receivedWrapper
                  }>
                  {!isSentByMe && (
                    <Image source={{ uri: img }} style={styles.avatar} />
                  )}

                  <TouchableOpacity
                    onPress={() => {
                      if (item.isLocked) {
                        handleUnlockMessage(item.id, item.selfDestructTime);
                      }
                    }}
                    onLongPress={() => handleLongPress(item)}
                    style={[
                      isSentByMe
                        ? styles.sentContainer
                        : styles.receivedContainer,
                      isSelfDestruct && styles.selfDestructMessage,
                    ]}>
                    {!isSentByMe && (
                      <Text style={styles.usernameText}>{username}</Text>
                    )}

                    {/* Ki·ªÉm tra n·∫øu tin nh·∫Øn b·ªã kh√≥a */}
                    {isSelfDestruct && item.isLocked ? (
                      <Text style={styles.lockedMessage}>
                        üîí Nh·∫•n ƒë·ªÉ m·ªü kh√≥a
                      </Text>
                    ) : (
                      <>
                        {/* N·∫øu tin nh·∫Øn l√† ·∫£nh */}
                        {item.imageUrl ? (
                          <TouchableOpacity
                            onPress={() => {
                              if (isSelfDestruct && item.isLocked) {
                                // üî• N·∫øu tin nh·∫Øn l√† ·∫£nh t·ª± h·ªßy v√† ƒëang kh√≥a, m·ªü kh√≥a ·∫£nh
                                handleUnlockAndStartTimer(item.id, item.imageUrl, item.selfDestructTime);
                              } else {
                                // üî• N·∫øu ƒë√£ m·ªü kh√≥a ho·∫∑c kh√¥ng ph·∫£i ·∫£nh t·ª± h·ªßy, m·ªü ·∫£nh ph√≥ng to
                                setSelectedImage(item.imageUrl);
                                setIsImageModalVisible(true);
                              }
                            }}>
                            <View style={styles.imageWrapper}>
                              {item.isLoading || !item.imageUrl ? (
                                // Hi·ªÉn th·ªã loading khi ·∫£nh ch∆∞a t·∫£i xong
                                <ActivityIndicator size="large" color="blue" style={styles.loadingIndicator} />
                              ) : (
                                // Hi·ªÉn th·ªã ·∫£nh b√¨nh th∆∞·ªùng
                                <Image source={{ uri: item.imageUrl }} style={styles.imageMessage} />
                              )}
                            </View>

                            {/* Hi·ªÉn th·ªã th·ªùi gian t·ª± h·ªßy n·∫øu ·∫£nh ƒë√£ m·ªü kh√≥a */}
                            {isSelfDestruct && timeLeft > 0 && (
                              <Text style={styles.selfDestructTimer}>üïí {timeLeft}s</Text>
                            )}
                          </TouchableOpacity>

                        ) : (
                          <>
                            {/* Hi·ªÉn th·ªã n·ªôi dung tin nh·∫Øn */}
                            <Text
                              style={
                                isSentByMe
                                  ? styles.SendmessageText
                                  : styles.ReceivedmessageText
                              }>
                              {item.text}
                            </Text>

                            {/* Hi·ªÉn th·ªã th·ªùi gian t·ª± h·ªßy n·∫øu ƒë√£ m·ªü kh√≥a */}
                            {isSelfDestruct && timeLeft > 0 && (
                              <Text style={styles.selfDestructTimer}>
                                üïí {timeLeft}s
                              </Text>
                            )}
                          </>
                        )}
                      </>
                    )}

                    {/* Hi·ªÉn th·ªã th·ªùi gian g·ª≠i tin nh·∫Øn */}
                    <Text
                      style={
                        isSentByMe
                          ? styles.Sendtimestamp
                          : styles.Revecivedtimestamp
                      }>
                      {new Date(item.timestamp).toLocaleTimeString([], {
                        hour: '2-digit',
                        minute: '2-digit',
                      })}
                    </Text>
                  </TouchableOpacity>
                </View>
              </View>
            );
          }}
          inverted // üëà TH√äM D√íNG N√ÄY
          contentContainerStyle={{ flexGrow: 1, justifyContent: 'flex-end' }} // üí• Th√™m d√≤ng n√†y

        />

        <FlatList
          data={user}
          keyExtractor={item => item.id} // ƒê·∫£m b·∫£o ID l√† string
          renderItem={({ item }) => <Text>{item.text}</Text>}
        />

        {isTyping && <Text style={styles.typingText}>ƒêang nh·∫≠p...</Text>}
        <View style={styles.inputContainer}>
          <TouchableOpacity
            onPress={() => setIsModalVisible(true)}
            style={{
              padding: 10,
              backgroundColor: '#f5f5f5',
              borderRadius: 10,
              alignItems: 'center',
            }}>
            <Icon
              name={isSelfDestruct ? 'timer-sand' : 'timer-off'}
              size={24}
              color={isSelfDestruct ? 'red' : '#007bff'}
            />
            <Text>{selfDestructTime ? `${selfDestructTime}s` : 'T·∫Øt'}</Text>
          </TouchableOpacity>
          <TouchableOpacity onPress={pickImage} style={styles.imageButton}>
            <Icon name="image" size={24} color="#007bff" />
          </TouchableOpacity>

          <Modal
            animationType="slide"
            transparent={true}
            visible={isModalVisible}
            onRequestClose={() => setIsModalVisible(false)}>
            <View style={styles.modalContainer}>
              <View style={styles.modalContent}>
                <Text style={styles.modalTitle}>Ch·ªçn th·ªùi gian t·ª± h·ªßy</Text>
                {timeOptions.map((option, index) => (
                  <TouchableOpacity
                    key={index}
                    style={styles.modalOption}
                    onPress={() => handleSelectTime(option.value)}>
                    <Text style={styles.modalText}>{option.label}</Text>
                  </TouchableOpacity>
                ))}
                <TouchableOpacity
                  onPress={() => setIsModalVisible(false)}
                  style={styles.modalCancel}>
                  <Text style={styles.modalText}>H·ªßy</Text>
                </TouchableOpacity>
              </View>
            </View>
          </Modal>

          <Modal
            animationType="slide"
            transparent={true}
            visible={isPinModalVisible}
            onRequestClose={() => setIsPinModalVisible(false)}>
            <View style={styles.modalContainer}>
              <View style={styles.modalContent}>
                <Text style={styles.modalTitle}>B·ªè ghim tin nh·∫Øn?</Text>
                <TouchableOpacity
                  style={styles.modalOption}
                  onPress={() => {
                    unpinMessage(selectedMessage.id);
                    setIsPinModalVisible(false);
                  }}>
                  <Text style={styles.modalText}>B·ªè ghim</Text>
                </TouchableOpacity>
                <TouchableOpacity
                  onPress={() => setIsPinModalVisible(false)}
                  style={styles.modalCancel}>
                  <Text style={styles.modalText}>H·ªßy</Text>
                </TouchableOpacity>
              </View>
            </View>
          </Modal>

          <Modal
            animationType="slide"
            transparent={true}
            visible={modal}
            onRequestClose={() => setModal(false)}>
            <View style={styles.modalContainer}>
              <View style={styles.modalContent}>
                <Text style={styles.modalTitle}>T√πy ch·ªçn tin nh·∫Øn</Text>

                {/* N·∫øu tin nh·∫Øn l√† vƒÉn b·∫£n, hi·ªÉn th·ªã n√∫t "Sao ch√©p n·ªôi dung" */}
                {selectedMess?.text && (
                  <TouchableOpacity
                    style={styles.modalOption}
                    onPress={() => {
                      Clipboard.setString(selectedMess.text);
                      Alert.alert(
                        'ƒê√£ sao ch√©p',
                        'N·ªôi dung tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c sao ch√©p.',
                      );
                      setModal(false);
                    }}>
                    <Text style={styles.modalText}> Sao ch√©p</Text>
                  </TouchableOpacity>
                )}

                {/* // N·∫øu tin nh·∫Øn ch∆∞a ghim, hi·ªÉn th·ªã n√∫t ghim */}
                <TouchableOpacity
                  style={styles.modalOption}
                  onPress={() => {
                    pinMessage(selectedMessage.id);
                    setIsPinModalVisible(false);
                    setModal(false);
                  }}>
                  <Text style={styles.modalText}>Ghim</Text>
                </TouchableOpacity>

                {/* N·∫øu l√† ·∫£nh, th√™m n√∫t "T·∫£i ·∫£nh v·ªÅ" */}
                {selectedMess?.imageUrl && (
                  <TouchableOpacity
                    style={styles.modalOption}
                    onPress={() => {
                      downloadImage(selectedMess.imageUrl);
                      setModal(false);
                    }}>
                    <Text style={styles.modalText}> T·∫£i ·∫£nh</Text>
                  </TouchableOpacity>
                )}

                {/* X√≥a tin nh·∫Øn ch·ªâ ·ªü local */}
                <TouchableOpacity
                  style={styles.modalOption}
                  onPress={() => {
                    deleteMessageLocally(selectedMess.id);
                    deleteMessageForUser(selectedMess.id);
                    setModal(false);
                  }}>
                  <Text style={styles.modalText}> X√≥a ch·ªâ m√¨nh t√¥i</Text>
                </TouchableOpacity>

                {/* Thu h·ªìi tin nh·∫Øn tr√™n c·∫£ hai thi·∫øt b·ªã */}
                <TouchableOpacity
                  style={styles.modalOption}
                  onPress={() => {
                    recallMessageForBoth(selectedMess.id);
                    setModal(false);
                  }}>
                  <Text style={styles.modalText}> Thu h·ªìi tin nh·∫Øn</Text>
                </TouchableOpacity>

                {/* N√∫t ƒê√≥ng */}
                <TouchableOpacity
                  style={styles.modalCancel}
                  onPress={() => setModal(false)}>
                  <Text style={[styles.modalText, { color: 'red' }]}>ƒê√≥ng</Text>
                </TouchableOpacity>
              </View>
            </View>
          </Modal>

          <View style={styles.inputWrapper}>
            <TextInput
              style={styles.input}
              value={text}
              onChangeText={value => {
                setText(value);
                handleTyping(value.length > 0);
              }}
              placeholder="Nh·∫≠p tin nh·∫Øn..."
              placeholderTextColor={'#aaa'}
              onBlur={() => handleTyping(false)}
            />
          </View>

          <TouchableOpacity
            onPress={() => sendMessage()}
            disabled={!text.trim() || countChat === 0}
            style={[styles.sendButton, countChat === 0 && { opacity: 0.5 }]}>
            <Icon
              name="send"
              size={24}
              color={
                !text.trim() || countChat === 0 || isSending
                  ? '#aaa'
                  : '#007bff'
              }
            />
          </TouchableOpacity>
        </View>
        <Modal
          visible={isImageModalVisible}
          transparent={true}
          onRequestClose={() => setIsImageModalVisible(false)}>
          <TouchableWithoutFeedback
            onPress={() => setIsImageModalVisible(false)}>
            <View
              style={{
                flex: 1,
                backgroundColor: 'black',
                justifyContent: 'center',
                alignItems: 'center',
              }}>
              <Image
                source={{ uri: selectedImage }}
                style={styles.fullScreenImage}
              />
            </View>
          </TouchableWithoutFeedback>
        </Modal>
      </View>
    </TouchableWithoutFeedback>
  );
};

const styles = StyleSheet.create({
  imageWrapper: {
    position: 'relative',
    justifyContent: 'center',
    alignItems: 'center',
    width: 200,
    height: 200,
  },

  loadingIndicator: {
    position: 'absolute',
    top: '50%',
    left: '50%',
    transform: [{ translateX: -15 }, { translateY: -15 }],
  },

  statusContainer: {
    marginLeft: 5,
    flexDirection: 'row',
    alignItems: 'center',
  },
  activeDot: {
    width: 8,
    height: 8,
    borderRadius: 4,
    backgroundColor: 'green',
    marginLeft: 5,
  },
  userStatus: {
    marginHorizontal: 5,
    fontSize: 12,
    color: '#888',
  },
  container: { flex: 1, padding: 0, backgroundColor: '#121212' },
  username: {
    fontSize: 20,
    fontWeight: 'bold',
    textAlign: 'center',
    marginVertical: 10,
  },
  sentWrapper: {
    alignSelf: 'flex-end',
    flexDirection: 'row',
    alignItems: 'center',
    marginTop: 10,
  },
  receivedWrapper: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 5,
    marginTop: 10,
  },
  avatar: {
    width: 40,
    height: 40,
    borderRadius: 20,
    marginRight: 8,
    marginLeft: 10,
  },
  usernameText: {
    fontSize: 14,
    color: '#007bff',
    fontWeight: 'bold',
    marginBottom: 2,
  },
  sentContainer: {
    backgroundColor: '#99F2C8',
    padding: 12,
    borderRadius: 20,
    maxWidth: '70%',
    alignSelf: 'flex-end',
    marginBottom: 10,
  },
  receivedContainer: {
    backgroundColor: '#FFFFFF',
    padding: 12,
    borderRadius: 20,
    maxWidth: '70%',
    marginBottom: 10,
  },

  SendmessageText: { fontSize: 16, color: '#000000' },
  ReceivedmessageText: { fontSize: 16, color: '#0F1828' },
  deletedText: { fontSize: 16, color: '#999', fontStyle: 'italic' },
  Sendtimestamp: {
    fontSize: 12,
    color: '#000000',
    marginTop: 5,
    alignSelf: 'flex-end',
  },
  Revecivedtimestamp: {
    fontSize: 12,
    color: '#ADB5BD',
    marginTop: 5,
    alignSelf: 'flex-end',
  },
  inputContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    borderWidth: 1,
    borderColor: '#ccc',
    padding: 10,
    borderRadius: 10,
    marginTop: 10,
    backgroundColor: '#FFFFFF',
  },
  inputWrapper: {
    flex: 1,
    backgroundColor: '#F7F7FC',
    borderRadius: 10,
    marginRight: 10,
  },
  input: {
    fontSize: 16,
    color: '#0F1828',
    padding: 8,
    backgroundColor: '#F7F7FC',
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 10,
    paddingHorizontal: 15,
    justifyContent: 'space-between',
    backgroundColor: '#000000',
    width: '100%',
  },
  userInfo: {
    flexDirection: 'row',
    alignItems: 'center',
    flex: 1,
    justifyContent: 'flex-start',
  },
  headerAvatar: {
    width: 40,
    height: 40,
    borderRadius: 20,
  },
  headerUsername: {
    fontSize: 14,
    fontWeight: 'bold',
    color: '#FFFFFF',
    marginLeft: 10,
  },
  backButton: {
    padding: 5,
  },
  iconButton: {
    padding: 8,
    borderRadius: 20,
  },
  sendButton: {
    padding: 10,
    borderRadius: 20,
  },
  typingText: {
    fontSize: 14,
    fontStyle: 'italic',
    color: '#007bff',
    marginLeft: 5,
    alignItems: 'flex-end',
    backgroundColor: '#FFFFFF',
    width: '25%',
    borderRadius: 10,
    padding: 2,
  },
  chatStatus: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#f0f0f0',
    paddingHorizontal: 10,
    paddingVertical: 5,
    borderRadius: 8,
  },
  chatCountText: {
    fontSize: 14,
    fontWeight: 'bold',
    color: '#007bff',
  },
  resetText: {
    fontSize: 14,
    fontWeight: 'bold',
    color: 'red',
  },

  seenStatusContainer: {
    alignSelf: 'flex-end', // ƒê·ªÉ cƒÉn ph·∫£i theo tin nh·∫Øn
    marginTop: 2, // T·∫°o kho·∫£ng c√°ch v·ªõi tin nh·∫Øn
    marginRight: 10, // ƒê·∫©y s√°t m√©p tin nh·∫Øn
  },
  modalContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'rgba(0,0,0,0.5)',
  },
  modalContent: {
    backgroundColor: '#fff',
    padding: 20,
    borderRadius: 10,
    width: '80%',
    alignItems: 'center',
  },
  modalTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 10,
    color: 'black',
  },
  modalOption: {
    paddingVertical: 10,
    width: '100%',
    alignItems: 'center',
    borderBottomWidth: 1,
    borderBottomColor: '#ccc',
  },
  modalText: {
    color: 'black',
    fontSize: 16,
  },
  modalCancel: {
    marginTop: 10,
    paddingVertical: 10,
    width: '100%',
    alignItems: 'center',
  },
  selfDestructMessage: {
    backgroundColor: '#ffcccb', // M√†u ƒë·ªè nh·∫°t cho tin nh·∫Øn t·ª± h·ªßy
    opacity: 0.8, // L√†m m·ªù tin nh·∫Øn ƒë·ªÉ d·ªÖ nh·∫≠n bi·∫øt
  },
  selfDestructTimer: {
    fontSize: 12,
    fontWeight: 'bold',
    color: 'red',
    textAlign: 'right',
  },

  TextselfDestructTimer: {
    fontSize: 12,
    fontWeight: 'bold',
    color: 'black',
    textAlign: 'right',
  },
  imageButton: {
    padding: 10,
    backgroundColor: '#f5f5f5',
    borderRadius: 10,
    alignItems: 'center',
    marginRight: 10,
  },
  imageMessage: {
    width: 200,
    height: 200,
    borderRadius: 10,
    marginTop: 5,
  },
  sentImage: {
    alignSelf: 'flex-end', // ·∫¢nh g·ª≠i ƒëi n·∫±m b√™n ph·∫£i
  },
  receivedImage: {
    alignSelf: 'flex-start', // ·∫¢nh nh·∫≠n n·∫±m b√™n tr√°i
  },
  pinnedMessageContainer: {
    backgroundColor: '#f0f0f0',
    padding: 10,
    margin: 5,
    borderRadius: 10,
  },
  pinnedMessageText: {
    fontSize: 16,
    color: 'blue',
  },
  pinnedMessageTime: {
    fontSize: 12,
    color: '#888',
    marginTop: 5,
  },
  pinnedHeader: {
    fontSize: 18,
    fontWeight: 'bold',
    padding: 10,
    backgroundColor: '#e0e0e0',
  },
  fullScreenImage: {
    width: '100%',
    height: '100%',
    resizeMode: 'contain', // Hi·ªÉn th·ªã ·∫£nh m√† kh√¥ng b·ªã m√©o
    backgroundColor: 'black', // T·∫°o n·ªÅn ƒëen ƒë·ªÉ nh√¨n r√µ h∆°n
  },
});

export default Single;
