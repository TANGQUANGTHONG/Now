import auth from '@react-native-firebase/auth';
import database from '@react-native-firebase/database';
import PushNotification from 'react-native-push-notification';
import {decryptMessage, generateSecretKey} from '../cryption/Encryption';

const lastProcessedMessage = {}; // L∆∞u tin nh·∫Øn cu·ªëi c√πng c·ªßa m·ªói cu·ªôc tr√≤ chuy·ªán
let lastNotificationTimestamp = 0; // Tr√°nh spam th√¥ng b√°o li√™n t·ª•c

export const configurePushNotification = () => {
  PushNotification.createChannel(
    {
      channelId: 'default-channel-id',
      channelName: 'Th√¥ng b√°o tin nh·∫Øn',
      channelDescription: 'Nh·∫≠n th√¥ng b√°o khi c√≥ tin nh·∫Øn m·ªõi',
      playSound: true,
      soundName: 'default',
      importance: 4,
      vibrate: true,
    },
    created => console.log(`K√™nh th√¥ng b√°o ƒë√£ t·∫°o: ${created}`),
  );
};

export const sendLocalNotification = (title, message) => {
  const now = Date.now();

  if (now - lastNotificationTimestamp < 3000) {
    console.log('Th√¥ng b√°o b·ªã ch·∫∑n ƒë·ªÉ tr√°nh spam.');
    return; // Ch·∫∑n spam th√¥ng b√°o trong v√≤ng 3 gi√¢y
  }

  lastNotificationTimestamp = now;
  console.log(`üîî G·ª≠i th√¥ng b√°o: ${title} - ${message}`);

  PushNotification.localNotification({
    channelId: 'default-channel-id',
    title: title,
    message: message,
    playSound: true,
    soundName: 'default',
    importance: 4,
    vibrate: true,
  });
};

export const listenForNewMessages = async () => {
  const currentUserId = auth().currentUser?.uid;
  if (!currentUserId) {
    console.log('Kh√¥ng t√¨m th·∫•y ID user hi·ªán t·∫°i.');
    return;
  }

  const chatsRef = database().ref('/chats');

  // L·∫•y tin nh·∫Øn cu·ªëi c√πng tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu l·∫Øng nghe s·ª± ki·ªán m·ªõi
  const snapshot = await chatsRef.once('value');
  if (!snapshot.exists()) return;

  const chatsData = snapshot.val();
  Object.keys(chatsData).forEach(chatId => {
    if (!chatsData[chatId].users || !chatsData[chatId].users[currentUserId])
      return;

    // L·∫•y tin nh·∫Øn m·ªõi nh·∫•t theo timestamp
    const messages = Object.entries(chatsData[chatId].messages || {})
      .map(([key, value]) => ({id: key, ...value}))
      .sort((a, b) => b.timestamp - a.timestamp);

    lastProcessedMessage[chatId] =
      messages.length > 0 ? messages[0].timestamp : 0;

    const messagesRef = database().ref(`/chats/${chatId}/messages`);

    // H·ªßy l·∫Øng nghe tr∆∞·ªõc khi th√™m m·ªõi
    messagesRef.off('child_added');

    messagesRef.on('child_added', async messageSnapshot => {
      const messageData = messageSnapshot.val();

      if (
        !messageData ||
        !messageData.senderId ||
        !messageData.text ||
        !messageData.timestamp
      )
        return;

      // N·∫øu tin nh·∫Øn n√†y l√† c·ªßa user hi·ªán t·∫°i -> B·ªè qua
      if (messageData.senderId === currentUserId) return;

      // N·∫øu tin nh·∫Øn ƒë√£ t·ª´ng ƒë∆∞·ª£c x·ª≠ l√Ω -> B·ªè qua
      if (messageData.timestamp <= lastProcessedMessage[chatId]) {
        return;
      }

      lastProcessedMessage[chatId] = messageData.timestamp; // C·∫≠p nh·∫≠t timestamp tin nh·∫Øn cu·ªëi c√πng

      // L·∫•y t√™n ng∆∞·ªùi g·ª≠i
      const senderName = await getSenderName(messageData.senderId);

      // Gi·∫£i m√£ tin nh·∫Øn
      const secretKey = generateSecretKey(messageData.senderId, currentUserId);
      const decryptedText = safeDecrypt(messageData.text, secretKey);

      console.log(`üì© Tin nh·∫Øn m·ªõi t·ª´ ${senderName}: ${decryptedText}`);

      // G·ª≠i th√¥ng b√°o
      sendLocalNotification(`New message `, `${decryptedText}`);
    });
  });
};

// L·∫•y t√™n ng∆∞·ªùi g·ª≠i t·ª´ Firebase
const getSenderName = async senderId => {
  try {
    const snapshot = await database()
      .ref(`/users/${senderId}/name`)
      .once('value');
    return snapshot.exists() ? snapshot.val() : 'Ng∆∞·ªùi d√πng';
  } catch (error) {
    console.error('L·ªói khi l·∫•y t√™n ng∆∞·ªùi g·ª≠i:', error);
    return 'Ng∆∞·ªùi d√πng';
  }
};

// H√†m gi·∫£i m√£ tin nh·∫Øn an to√†n
const safeDecrypt = (encryptedText, secretKey) => {
  try {
    if (!encryptedText) return 'N·ªôi dung tr·ªëng';

    const decryptedText = decryptMessage(encryptedText, secretKey);
    return decryptedText && decryptedText !== 'L·ªói gi·∫£i m√£'
      ? decryptedText
      : 'Tin nh·∫Øn b·ªã m√£ h√≥a';
  } catch (error) {
    console.error('L·ªói gi·∫£i m√£:', error);
    return 'Tin nh·∫Øn b·ªã m√£ h√≥a';
  }
};
