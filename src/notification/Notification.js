import auth from '@react-native-firebase/auth';
import database from '@react-native-firebase/database';
import PushNotification from 'react-native-push-notification';
import {decryptMessage, generateSecretKey} from '../cryption/Encryption';

const lastProcessedMessage = {}; // L∆∞u tin nh·∫Øn cu·ªëi c√πng c·ªßa m·ªói cu·ªôc tr√≤ chuy·ªán
let lastNotificationTimestamp = 0; // Tr√°nh spam th√¥ng b√°o li√™n t·ª•c

export const configurePushNotification = () => {
  PushNotification.createChannel(
    {
      channelId: 'default-channel-id',
      channelName: 'Th√¥ng b√°o tin nh·∫Øn',
      channelDescription: 'Nh·∫≠n th√¥ng b√°o khi c√≥ tin nh·∫Øn m·ªõi',
      playSound: true,
      soundName: 'default',
      importance: 4,
      vibrate: true,
    },
    created => console.log(`K√™nh th√¥ng b√°o ƒë√£ t·∫°o: ${created}`),
  );
};

export const sendLocalNotification = (title, message) => {
  const now = Date.now();

  if (now - lastNotificationTimestamp < 3000) {
    console.log('Th√¥ng b√°o b·ªã ch·∫∑n ƒë·ªÉ tr√°nh spam.');
    return; // Ch·∫∑n spam th√¥ng b√°o trong v√≤ng 3 gi√¢y
  }

  lastNotificationTimestamp = now;
  console.log(`G·ª≠i th√¥ng b√°o: ${title} - ${message}`);

  PushNotification.localNotification({
    channelId: 'default-channel-id',
    title: "Ng∆∞·ªùi d√πng",
    message: message,
    playSound: true,
    soundName: 'default',
    importance: 4,
    vibrate: true,
  });
};

export const listenForNewMessages = async () => {
  const currentUserId = auth().currentUser?.uid;
  if (!currentUserId) {
    console.log("Kh√¥ng t√¨m th·∫•y ID user hi·ªán t·∫°i.");
    return;
  }

  const chatsRef = database().ref('/chats');

  chatsRef.on("value", (snapshot) => {
    if (!snapshot.exists()) return;

    const chatsData = snapshot.val();
    Object.keys(chatsData).forEach(async (chatId) => {  
      if (!chatsData[chatId].users || !chatsData[chatId].users[currentUserId]) return;

      const messagesRef = database().ref(`/chats/${chatId}/messages`);
      messagesRef.off("child_added"); // üî• H·ªßy l·∫Øng nghe c≈© tr∆∞·ªõc khi ƒëƒÉng k√Ω m·ªõi

      messagesRef.on("child_added", async (messageSnapshot) => {
        const messageData = messageSnapshot.val();
        if (!messageData || !messageData.senderId || !messageData.text || !messageData.timestamp) return;
        if (messageData.senderId === currentUserId) return; // B·ªè qua tin nh·∫Øn c·ªßa ch√≠nh m√¨nh

        // Ch·ªâ g·ª≠i th√¥ng b√°o n·∫øu tin nh·∫Øn m·ªõi ch∆∞a ƒë∆∞·ª£c x·ª≠ l√Ω
        if (!lastProcessedMessage[chatId] || messageData.timestamp > lastProcessedMessage[chatId]) {
          lastProcessedMessage[chatId] = messageData.timestamp; // C·∫≠p nh·∫≠t tin nh·∫Øn cu·ªëi c√πng

          // üî• L·∫•y v√† gi·∫£i m√£ t√™n ng∆∞·ªùi g·ª≠i
          const senderName = await getSenderName(messageData.senderId, currentUserId); // ‚ùå Kh√¥ng c·∫ßn gi·∫£i m√£ l·∫°i

          // üîê Gi·∫£i m√£ tin nh·∫Øn
          const secretKey = generateSecretKey(messageData.senderId, currentUserId);
          const decryptedText = safeDecrypt(messageData.text, secretKey);

          console.log(`üì© Tin nh·∫Øn m·ªõi t·ª´ ${senderName}: ${decryptedText}`);

          // üîî G·ª≠i th√¥ng b√°o v·ªõi t√™n ng∆∞·ªùi g·ª≠i
          sendLocalNotification(senderName, decryptedText);
        }
      });
    });
  });
};

const getSenderName = async (senderId, currentUserId) => {
  try {
    const snapshot = await database().ref(`/users/${senderId}/name`).once('value');

    if (!snapshot.exists()) {
      console.log(`‚ùå Kh√¥ng t√¨m th·∫•y t√™n c·ªßa ${senderId} trong Firebase.`);
      return 'Ng∆∞·ªùi d√πng';
    }

    const encryptedName = snapshot.val(); // üî• L·∫•y t√™n ƒë√£ m√£ h√≥a t·ª´ Firebase

    // üîê T·∫°o secret key
    const secretKey = generateSecretKey(senderId, currentUserId);

    // üîì Gi·∫£i m√£ t√™n ng∆∞·ªùi g·ª≠i
    const decryptedName = decryptMessage(encryptedName, senderId, currentUserId);

    console.log(`üîç D·ªØ li·ªáu t·ª´ Firebase: ${encryptedName}`);
    console.log(`üîë Secret Key: ${secretKey}`);
    console.log(`‚úÖ T√™n ƒë√£ gi·∫£i m√£: ${decryptedName}`);

    return decryptedName !== '' ? decryptedName : 'Ng∆∞·ªùi d√πng';
  } catch (error) {
    console.error('‚ùå L·ªói khi l·∫•y t√™n ng∆∞·ªùi g·ª≠i:', error);
    return 'Ng∆∞·ªùi d√πng';
  }
};


// H√†m gi·∫£i m√£ tin nh·∫Øn an to√†n
const safeDecrypt = (encryptedText, secretKey) => {
  try {
    if (!encryptedText) return 'N·ªôi dung tr·ªëng';

    const decryptedText = decryptMessage(encryptedText, secretKey);
    return decryptedText && decryptedText !== 'L·ªói gi·∫£i m√£'
      ? decryptedText
      : 'Tin nh·∫Øn b·ªã m√£ h√≥a';
  } catch (error) {
    console.error('L·ªói gi·∫£i m√£:', error);
    return 'Tin nh·∫Øn b·ªã m√£ h√≥a';
  }
};
