import "react-native-get-random-values";
import CryptoJS from "crypto-js";

// üîπ M√£ h√≥a userId & myId th√†nh SecretKey cho m·ªói ph√≤ng chat
export const generateSecretKey = (userId, myId) => {
  const sortedIds = [userId, myId].sort().join("_"); // ƒê·∫£m b·∫£o th·ª© t·ª± lu√¥n gi·ªëng nhau
  return CryptoJS.enc.Base64.stringify(CryptoJS.SHA256(sortedIds));
};

// üîπ M√£ h√≥a chatId ƒë·ªÉ kh√¥ng ch·ª©a k√Ω t·ª± ƒë·∫∑c bi·ªát
export const encodeChatId = (userId, myId) => {
  const rawChatId = [userId, myId].sort().join("_"); // ƒê·∫£m b·∫£o th·ª© t·ª± ID lu√¥n gi·ªëng nhau
  const hashedChatId = CryptoJS.SHA256(rawChatId).toString(CryptoJS.enc.Base64);
  
  // Lo·∫°i b·ªè k√Ω t·ª± ƒë·∫∑c bi·ªát (+, /, =) ƒë·ªÉ ƒë·∫£m b·∫£o chatId kh√¥ng b·ªã l·ªói
  return hashedChatId.replace(/\+/g, 'A').replace(/\//g, 'B').replace(/=/g, '');
};

// üîπ M√£ h√≥a tin nh·∫Øn
export const encryptMessage = (message, userId, myId) => {
  const secretKey = generateSecretKey(userId, myId);
  return CryptoJS.AES.encrypt(message, secretKey).toString();
};

// üîπ Gi·∫£i m√£ tin nh·∫Øn
export const decryptMessage = (encryptedMessage, userId, myId) => {
  try {
    const secretKey = generateSecretKey(userId, myId);
    const bytes = CryptoJS.AES.decrypt(encryptedMessage, secretKey);
    return bytes.toString(CryptoJS.enc.Utf8);
  } catch (error) {
    // console.error("Gi·∫£i m√£ l·ªói:", error);
    return "‚ùå L·ªói gi·∫£i m√£";
  }
};


// // üîπ M√£ h√≥a userId (B·∫£o m·∫≠t ID c·ªßa ng∆∞·ªùi d√πng)
// export const encryptUserId = (userId) => {
//   return CryptoJS.AES.encrypt(userId, "SuperSecureKey").toString();
// };

// // üîπ Gi·∫£i m√£ userId (L·∫•y l·∫°i ID user ƒë√£ m√£ h√≥a)
// export const decryptUserId = (encryptedUserId) => {
//   try {
//     const bytes = CryptoJS.AES.decrypt(encryptedUserId, "SuperSecureKey");
//     return bytes.toString(CryptoJS.enc.Utf8);
//   } catch (error) {
//     console.error("L·ªói gi·∫£i m√£ userId:", error);
//     return null;
//   }
// };+
